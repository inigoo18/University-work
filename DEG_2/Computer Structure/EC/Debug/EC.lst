
EC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          00000010  0c1000d4  0c1000d4  000080d4  2**2
                  ALLOC
  2 .text         00001ffc  0c1000e4  0c1000e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .debug_abbrev 000005d7  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000109f  00000000  00000000  0000a6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000959  00000000  00000000  0000b756  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 0002dafb  00000000  00000000  0000c0af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000007bc  00000000  00000000  00039baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000385  00000000  00000000  0003a366  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000001ce  00000000  00000000  0003a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000140  00000000  00000000  0003a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000582  00000000  00000000  0003aa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0003af82  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000030  00000000  00000000  0003afac  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000690  00000000  00000000  0003afdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c1000e4 <D8Led_init>:
								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F, DIGIT_X };

			  					  
void D8Led_init(void)
{
 c1000e4:	e1a0c00d 	mov	ip, sp
 c1000e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1000ec:	e24cb004 	sub	fp, ip, #4
    LED8ADDR = ~0 ;
 c1000f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1000f4:	e3e02000 	mvn	r2, #0
 c1000f8:	e5c32000 	strb	r2, [r3]
}
 c1000fc:	e24bd00c 	sub	sp, fp, #12
 c100100:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100104:	e12fff1e 	bx	lr

0c100108 <D8Led_segment>:

void D8Led_segment(int value)
{
 c100108:	e1a0c00d 	mov	ip, sp
 c10010c:	e92dd800 	push	{fp, ip, lr, pc}
 c100110:	e24cb004 	sub	fp, ip, #4
 c100114:	e24dd008 	sub	sp, sp, #8
 c100118:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 8) )
 c10011c:	e51b3010 	ldr	r3, [fp, #-16]
 c100120:	e3530000 	cmp	r3, #0
 c100124:	ba00000a 	blt	c100154 <D8Led_segment+0x4c>
 c100128:	e51b3010 	ldr	r3, [fp, #-16]
 c10012c:	e3530007 	cmp	r3, #7
 c100130:	ca000007 	bgt	c100154 <D8Led_segment+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el segmento que está en la posición
		// value del array Segmentes. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Segments[value];
 c100134:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100138:	e59f2020 	ldr	r2, [pc, #32]	; c100160 <D8Led_segment+0x58>
 c10013c:	e51b1010 	ldr	r1, [fp, #-16]
 c100140:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c100144:	e20220ff 	and	r2, r2, #255	; 0xff
 c100148:	e1e02002 	mvn	r2, r2
 c10014c:	e20220ff 	and	r2, r2, #255	; 0xff
 c100150:	e5c32000 	strb	r2, [r3]
}
 c100154:	e24bd00c 	sub	sp, fp, #12
 c100158:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10015c:	e12fff1e 	bx	lr
 c100160:	0c100000 	.word	0x0c100000

0c100164 <D8Led_digit>:

void D8Led_digit(int value)
{
 c100164:	e1a0c00d 	mov	ip, sp
 c100168:	e92dd800 	push	{fp, ip, lr, pc}
 c10016c:	e24cb004 	sub	fp, ip, #4
 c100170:	e24dd008 	sub	sp, sp, #8
 c100174:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 17) )
 c100178:	e51b3010 	ldr	r3, [fp, #-16]
 c10017c:	e3530000 	cmp	r3, #0
 c100180:	ba00000a 	blt	c1001b0 <D8Led_digit+0x4c>
 c100184:	e51b3010 	ldr	r3, [fp, #-16]
 c100188:	e3530010 	cmp	r3, #16
 c10018c:	ca000007 	bgt	c1001b0 <D8Led_digit+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el dígito que está en la posición
		// value del array Digits. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Digits[value];
 c100190:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100194:	e59f2020 	ldr	r2, [pc, #32]	; c1001bc <D8Led_digit+0x58>
 c100198:	e51b1010 	ldr	r1, [fp, #-16]
 c10019c:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c1001a0:	e20220ff 	and	r2, r2, #255	; 0xff
 c1001a4:	e1e02002 	mvn	r2, r2
 c1001a8:	e20220ff 	and	r2, r2, #255	; 0xff
 c1001ac:	e5c32000 	strb	r2, [r3]

}
 c1001b0:	e24bd00c 	sub	sp, fp, #12
 c1001b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001b8:	e12fff1e 	bx	lr
 c1001bc:	0c100020 	.word	0x0c100020

0c1001c0 <read_button>:
#include "button.h"
#include "leds.h"
#include "gpio.h"

unsigned int read_button(void)
{
 c1001c0:	e1a0c00d 	mov	ip, sp
 c1001c4:	e92dd800 	push	{fp, ip, lr, pc}
 c1001c8:	e24cb004 	sub	fp, ip, #4
 c1001cc:	e24dd008 	sub	sp, sp, #8
	unsigned int buttons = 0;
 c1001d0:	e3a03000 	mov	r3, #0
 c1001d4:	e50b3010 	str	r3, [fp, #-16]
	//COMPLETAR utilizando el interfaz del puerto G de gpio.h debemos leer los
	//pines 6 y 7 del puerto G (portG_read) debemos devolver un valor (buttons)
	//en el que el bit 0 (el menos significativo) representa el estado del botÃ³n
	//del pin 6 y el bit 1 representa el estado del botÃ³n del pin 7 (a 1 si
	//estÃ¡n pulsados a 0 si no lo estÃ¡n).
	portG_read(6,&val);
 c1001d8:	e24b3011 	sub	r3, fp, #17
 c1001dc:	e3a00006 	mov	r0, #6
 c1001e0:	e1a01003 	mov	r1, r3
 c1001e4:	eb000183 	bl	c1007f8 <portG_read>
	if(val == LOW)
 c1001e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1001ec:	e3530000 	cmp	r3, #0
 c1001f0:	1a000001 	bne	c1001fc <read_button+0x3c>
		buttons = BUT1;
 c1001f4:	e3a03001 	mov	r3, #1
 c1001f8:	e50b3010 	str	r3, [fp, #-16]
	
	portG_read(7,&val);
 c1001fc:	e24b3011 	sub	r3, fp, #17
 c100200:	e3a00007 	mov	r0, #7
 c100204:	e1a01003 	mov	r1, r3
 c100208:	eb00017a 	bl	c1007f8 <portG_read>
	if(val == LOW)
 c10020c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100210:	e3530000 	cmp	r3, #0
 c100214:	1a000002 	bne	c100224 <read_button+0x64>
			buttons |= BUT2;
 c100218:	e51b3010 	ldr	r3, [fp, #-16]
 c10021c:	e3833002 	orr	r3, r3, #2
 c100220:	e50b3010 	str	r3, [fp, #-16]

	return buttons;
 c100224:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100228:	e1a00003 	mov	r0, r3
 c10022c:	e24bd00c 	sub	sp, fp, #12
 c100230:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100234:	e12fff1e 	bx	lr

0c100238 <portB_conf>:
#include "gpio.h"

/* Port B interface implementation */

int portB_conf(int pin, enum port_mode mode)
{
 c100238:	e1a0c00d 	mov	ip, sp
 c10023c:	e92dd800 	push	{fp, ip, lr, pc}
 c100240:	e24cb004 	sub	fp, ip, #4
 c100244:	e24dd010 	sub	sp, sp, #16
 c100248:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10024c:	e1a03001 	mov	r3, r1
 c100250:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int ret = 0;
 c100254:	e3a03000 	mov	r3, #0
 c100258:	e50b3010 	str	r3, [fp, #-16]
	if (pin < 0 || pin > 10)
 c10025c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100260:	e3530000 	cmp	r3, #0
 c100264:	ba000002 	blt	c100274 <portB_conf+0x3c>
 c100268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10026c:	e353000a 	cmp	r3, #10
 c100270:	da000001 	ble	c10027c <portB_conf+0x44>
		return -1; // indica error
 c100274:	e3e03000 	mvn	r3, #0
 c100278:	ea00001b 	b	c1002ec <portB_conf+0xb4>

	if (mode == SIGOUT)
 c10027c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100280:	e3530002 	cmp	r3, #2
 c100284:	1a000008 	bne	c1002ac <portB_conf+0x74>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 1 para que por
		// dicho pin en el puerto B salga la seÃƒÂ±al correspondiente del
		// controlador de memoria
		rPCONB  |= (0x1 << pin); //pone a 1 el pin pin
 c100288:	e59f306c 	ldr	r3, [pc, #108]	; c1002fc <portB_conf+0xc4>
 c10028c:	e59f2068 	ldr	r2, [pc, #104]	; c1002fc <portB_conf+0xc4>
 c100290:	e5921000 	ldr	r1, [r2]
 c100294:	e3a00001 	mov	r0, #1
 c100298:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10029c:	e1a02210 	lsl	r2, r0, r2
 c1002a0:	e1812002 	orr	r2, r1, r2
 c1002a4:	e5832000 	str	r2, [r3]
 c1002a8:	ea00000e 	b	c1002e8 <portB_conf+0xb0>
	else if (mode == OUTPUT)
 c1002ac:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1002b0:	e3530001 	cmp	r3, #1
 c1002b4:	1a000009 	bne	c1002e0 <portB_conf+0xa8>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 0 para que dicho
		// pin sea un pin de salida
		rPCONB &= ~(0x1 << pin); //ponemos a 0 el pin pin
 c1002b8:	e59f303c 	ldr	r3, [pc, #60]	; c1002fc <portB_conf+0xc4>
 c1002bc:	e59f2038 	ldr	r2, [pc, #56]	; c1002fc <portB_conf+0xc4>
 c1002c0:	e5921000 	ldr	r1, [r2]
 c1002c4:	e3a00001 	mov	r0, #1
 c1002c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1002cc:	e1a02210 	lsl	r2, r0, r2
 c1002d0:	e1e02002 	mvn	r2, r2
 c1002d4:	e0012002 	and	r2, r1, r2
 c1002d8:	e5832000 	str	r2, [r3]
 c1002dc:	ea000001 	b	c1002e8 <portB_conf+0xb0>
	else
		ret = -1; // indica error
 c1002e0:	e3e03000 	mvn	r3, #0
 c1002e4:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c1002e8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1002ec:	e1a00003 	mov	r0, r3
 c1002f0:	e24bd00c 	sub	sp, fp, #12
 c1002f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1002f8:	e12fff1e 	bx	lr
 c1002fc:	01d20008 	.word	0x01d20008

0c100300 <portB_write>:

int portB_write(int pin, enum digital val)
{
 c100300:	e1a0c00d 	mov	ip, sp
 c100304:	e92dd800 	push	{fp, ip, lr, pc}
 c100308:	e24cb004 	sub	fp, ip, #4
 c10030c:	e24dd008 	sub	sp, sp, #8
 c100310:	e50b0010 	str	r0, [fp, #-16]
 c100314:	e1a03001 	mov	r3, r1
 c100318:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 10)
 c10031c:	e51b3010 	ldr	r3, [fp, #-16]
 c100320:	e3530000 	cmp	r3, #0
 c100324:	ba000002 	blt	c100334 <portB_write+0x34>
 c100328:	e51b3010 	ldr	r3, [fp, #-16]
 c10032c:	e353000a 	cmp	r3, #10
 c100330:	da000001 	ble	c10033c <portB_write+0x3c>
		return -1; // indica error
 c100334:	e3e03000 	mvn	r3, #0
 c100338:	ea00001a 	b	c1003a8 <portB_write+0xa8>

	if (val < 0 || val > 1)
 c10033c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100340:	e3530001 	cmp	r3, #1
 c100344:	9a000001 	bls	c100350 <portB_write+0x50>
		return -1; // indica error
 c100348:	e3e03000 	mvn	r3, #0
 c10034c:	ea000015 	b	c1003a8 <portB_write+0xa8>

	if (val)
 c100350:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100354:	e3530000 	cmp	r3, #0
 c100358:	0a000008 	beq	c100380 <portB_write+0x80>
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 1
		rPDATB |= (0x1 << pin);
 c10035c:	e59f3054 	ldr	r3, [pc, #84]	; c1003b8 <portB_write+0xb8>
 c100360:	e59f2050 	ldr	r2, [pc, #80]	; c1003b8 <portB_write+0xb8>
 c100364:	e5921000 	ldr	r1, [r2]
 c100368:	e3a00001 	mov	r0, #1
 c10036c:	e51b2010 	ldr	r2, [fp, #-16]
 c100370:	e1a02210 	lsl	r2, r0, r2
 c100374:	e1812002 	orr	r2, r1, r2
 c100378:	e5832000 	str	r2, [r3]
 c10037c:	ea000008 	b	c1003a4 <portB_write+0xa4>
	else
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 0
		rPDATB &= ~(0x1 << pin);
 c100380:	e59f3030 	ldr	r3, [pc, #48]	; c1003b8 <portB_write+0xb8>
 c100384:	e59f202c 	ldr	r2, [pc, #44]	; c1003b8 <portB_write+0xb8>
 c100388:	e5921000 	ldr	r1, [r2]
 c10038c:	e3a00001 	mov	r0, #1
 c100390:	e51b2010 	ldr	r2, [fp, #-16]
 c100394:	e1a02210 	lsl	r2, r0, r2
 c100398:	e1e02002 	mvn	r2, r2
 c10039c:	e0012002 	and	r2, r1, r2
 c1003a0:	e5832000 	str	r2, [r3]
	return 0;
 c1003a4:	e3a03000 	mov	r3, #0
}
 c1003a8:	e1a00003 	mov	r0, r3
 c1003ac:	e24bd00c 	sub	sp, fp, #12
 c1003b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003b4:	e12fff1e 	bx	lr
 c1003b8:	01d2000c 	.word	0x01d2000c

0c1003bc <portG_conf>:

/* Port G interface implementation */

int portG_conf(int pin, enum port_mode mode)
{
 c1003bc:	e1a0c00d 	mov	ip, sp
 c1003c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1003c4:	e24cb004 	sub	fp, ip, #4
 c1003c8:	e24dd010 	sub	sp, sp, #16
 c1003cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1003d0:	e1a03001 	mov	r3, r1
 c1003d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos  = pin*2;
 c1003d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1003dc:	e1a03083 	lsl	r3, r3, #1
 c1003e0:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c1003e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1003e8:	e3530000 	cmp	r3, #0
 c1003ec:	ba000002 	blt	c1003fc <portG_conf+0x40>
 c1003f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1003f4:	e3530007 	cmp	r3, #7
 c1003f8:	da000001 	ble	c100404 <portG_conf+0x48>
		return -1; // indica error
 c1003fc:	e3e03000 	mvn	r3, #0
 c100400:	ea000042 	b	c100510 <portG_conf+0x154>

	switch (mode) {
 c100404:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100408:	e3530003 	cmp	r3, #3
 c10040c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100410:	ea00003b 	b	c100504 <portG_conf+0x148>
 c100414:	0c100424 	.word	0x0c100424
 c100418:	0c10044c 	.word	0x0c10044c
 c10041c:	0c100494 	.word	0x0c100494
 c100420:	0c1004e0 	.word	0x0c1004e0
		case INPUT:
			// COMPLETAR: poner en rPCONG 00 a partir de la posiciÃƒÂ³n pos para
			// configurar como pin de entrada el pin indicado por el parÃƒÂ¡metro pin
			rPCONG &= ~(0x3 << pos);
 c100424:	e59f30f4 	ldr	r3, [pc, #244]	; c100520 <portG_conf+0x164>
 c100428:	e59f20f0 	ldr	r2, [pc, #240]	; c100520 <portG_conf+0x164>
 c10042c:	e5921000 	ldr	r1, [r2]
 c100430:	e3a00003 	mov	r0, #3
 c100434:	e51b2010 	ldr	r2, [fp, #-16]
 c100438:	e1a02210 	lsl	r2, r0, r2
 c10043c:	e1e02002 	mvn	r2, r2
 c100440:	e0012002 	and	r2, r1, r2
 c100444:	e5832000 	str	r2, [r3]
			break;
 c100448:	ea00002f 	b	c10050c <portG_conf+0x150>
		case OUTPUT:
			// COMPLETAR: poner en rPCONG 01 a partir de la posiciÃƒÂ³n pos para
			// configurar como pin de salida el pin indicado por el parÃƒÂ¡metro pin
			rPCONG &= ~(0x3 << pos);
 c10044c:	e59f30cc 	ldr	r3, [pc, #204]	; c100520 <portG_conf+0x164>
 c100450:	e59f20c8 	ldr	r2, [pc, #200]	; c100520 <portG_conf+0x164>
 c100454:	e5921000 	ldr	r1, [r2]
 c100458:	e3a00003 	mov	r0, #3
 c10045c:	e51b2010 	ldr	r2, [fp, #-16]
 c100460:	e1a02210 	lsl	r2, r0, r2
 c100464:	e1e02002 	mvn	r2, r2
 c100468:	e0012002 	and	r2, r1, r2
 c10046c:	e5832000 	str	r2, [r3]
			rPCONG |= (0x1 << pos);
 c100470:	e59f30a8 	ldr	r3, [pc, #168]	; c100520 <portG_conf+0x164>
 c100474:	e59f20a4 	ldr	r2, [pc, #164]	; c100520 <portG_conf+0x164>
 c100478:	e5921000 	ldr	r1, [r2]
 c10047c:	e3a00001 	mov	r0, #1
 c100480:	e51b2010 	ldr	r2, [fp, #-16]
 c100484:	e1a02210 	lsl	r2, r0, r2
 c100488:	e1812002 	orr	r2, r1, r2
 c10048c:	e5832000 	str	r2, [r3]
			break;
 c100490:	ea00001d 	b	c10050c <portG_conf+0x150>
		case SIGOUT:
			// COMPLETAR: poner en rPCONG 10 a partir de la posiciÃƒÂ³n pos para
			// que salga la seÃƒÂ±al interna correspondiente por el pin indicado
			// por el parÃƒÂ¡metro pin
			rPCONG &= ~(0x1 << pos);
 c100494:	e59f3084 	ldr	r3, [pc, #132]	; c100520 <portG_conf+0x164>
 c100498:	e59f2080 	ldr	r2, [pc, #128]	; c100520 <portG_conf+0x164>
 c10049c:	e5921000 	ldr	r1, [r2]
 c1004a0:	e3a00001 	mov	r0, #1
 c1004a4:	e51b2010 	ldr	r2, [fp, #-16]
 c1004a8:	e1a02210 	lsl	r2, r0, r2
 c1004ac:	e1e02002 	mvn	r2, r2
 c1004b0:	e0012002 	and	r2, r1, r2
 c1004b4:	e5832000 	str	r2, [r3]
			rPCONG |= (0x1 << (pos+1));
 c1004b8:	e59f3060 	ldr	r3, [pc, #96]	; c100520 <portG_conf+0x164>
 c1004bc:	e59f205c 	ldr	r2, [pc, #92]	; c100520 <portG_conf+0x164>
 c1004c0:	e5921000 	ldr	r1, [r2]
 c1004c4:	e51b2010 	ldr	r2, [fp, #-16]
 c1004c8:	e2822001 	add	r2, r2, #1
 c1004cc:	e3a00001 	mov	r0, #1
 c1004d0:	e1a02210 	lsl	r2, r0, r2
 c1004d4:	e1812002 	orr	r2, r1, r2
 c1004d8:	e5832000 	str	r2, [r3]
			break;
 c1004dc:	ea00000a 	b	c10050c <portG_conf+0x150>
		case EINT:
			// COMPLETAR: poner en rPCONG 11 a partir de la posiciÃƒÂ³n pos para
			// habilitar la generaciÃƒÂ³n de interrupciones externas por el pin
			// indicado por el parÃƒÂ¡metro pin
			rPCONG |= (0x3 << pos);
 c1004e0:	e59f3038 	ldr	r3, [pc, #56]	; c100520 <portG_conf+0x164>
 c1004e4:	e59f2034 	ldr	r2, [pc, #52]	; c100520 <portG_conf+0x164>
 c1004e8:	e5921000 	ldr	r1, [r2]
 c1004ec:	e3a00003 	mov	r0, #3
 c1004f0:	e51b2010 	ldr	r2, [fp, #-16]
 c1004f4:	e1a02210 	lsl	r2, r0, r2
 c1004f8:	e1812002 	orr	r2, r1, r2
 c1004fc:	e5832000 	str	r2, [r3]
			break;
 c100500:	ea000001 	b	c10050c <portG_conf+0x150>
		default:
			return -1;
 c100504:	e3e03000 	mvn	r3, #0
 c100508:	ea000000 	b	c100510 <portG_conf+0x154>
	}

	return 0;
 c10050c:	e3a03000 	mov	r3, #0
}
 c100510:	e1a00003 	mov	r0, r3
 c100514:	e24bd00c 	sub	sp, fp, #12
 c100518:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10051c:	e12fff1e 	bx	lr
 c100520:	01d20040 	.word	0x01d20040

0c100524 <portG_eint_trig>:

int portG_eint_trig(int pin, enum trigger trig)
{
 c100524:	e1a0c00d 	mov	ip, sp
 c100528:	e92dd800 	push	{fp, ip, lr, pc}
 c10052c:	e24cb004 	sub	fp, ip, #4
 c100530:	e24dd010 	sub	sp, sp, #16
 c100534:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100538:	e1a03001 	mov	r3, r1
 c10053c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*4;
 c100540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100544:	e1a03103 	lsl	r3, r3, #2
 c100548:	e50b3010 	str	r3, [fp, #-16]

		if (pin < 0 || pin > 7)
 c10054c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100550:	e3530000 	cmp	r3, #0
 c100554:	ba000002 	blt	c100564 <portG_eint_trig+0x40>
 c100558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10055c:	e3530007 	cmp	r3, #7
 c100560:	da000001 	ble	c10056c <portG_eint_trig+0x48>
			return -1;
 c100564:	e3e03000 	mvn	r3, #0
 c100568:	ea00005d 	b	c1006e4 <portG_eint_trig+0x1c0>

	switch (trig) {
 c10056c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100570:	e3530004 	cmp	r3, #4
 c100574:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100578:	ea000056 	b	c1006d8 <portG_eint_trig+0x1b4>
 c10057c:	0c100590 	.word	0x0c100590
 c100580:	0c1005b8 	.word	0x0c1005b8
 c100584:	0c100600 	.word	0x0c100600
 c100588:	0c100648 	.word	0x0c100648
 c10058c:	0c100690 	.word	0x0c100690
			case LLOW:
				// COMPLETAR: poner en rEXTINT a partir de la posición pos tres bits
				// a 000, para configurar interrupciones externas por nivel bajo
				rEXTINT &= ~(0x7 << pos);
 c100590:	e59f315c 	ldr	r3, [pc, #348]	; c1006f4 <portG_eint_trig+0x1d0>
 c100594:	e59f2158 	ldr	r2, [pc, #344]	; c1006f4 <portG_eint_trig+0x1d0>
 c100598:	e5921000 	ldr	r1, [r2]
 c10059c:	e3a00007 	mov	r0, #7
 c1005a0:	e51b2010 	ldr	r2, [fp, #-16]
 c1005a4:	e1a02210 	lsl	r2, r0, r2
 c1005a8:	e1e02002 	mvn	r2, r2
 c1005ac:	e0012002 	and	r2, r1, r2
 c1005b0:	e5832000 	str	r2, [r3]
				break;
 c1005b4:	ea000049 	b	c1006e0 <portG_eint_trig+0x1bc>
			case LHIGH:
				// COMPLETAR: poner en rEXTINT a partir de la posición pos tres bits
				// a 001, para configurar interrupciones externas por nivel alto
				rEXTINT &= ~(0x7 << pos);
 c1005b8:	e59f3134 	ldr	r3, [pc, #308]	; c1006f4 <portG_eint_trig+0x1d0>
 c1005bc:	e59f2130 	ldr	r2, [pc, #304]	; c1006f4 <portG_eint_trig+0x1d0>
 c1005c0:	e5921000 	ldr	r1, [r2]
 c1005c4:	e3a00007 	mov	r0, #7
 c1005c8:	e51b2010 	ldr	r2, [fp, #-16]
 c1005cc:	e1a02210 	lsl	r2, r0, r2
 c1005d0:	e1e02002 	mvn	r2, r2
 c1005d4:	e0012002 	and	r2, r1, r2
 c1005d8:	e5832000 	str	r2, [r3]
				rEXTINT |= (0x1 << pos);
 c1005dc:	e59f3110 	ldr	r3, [pc, #272]	; c1006f4 <portG_eint_trig+0x1d0>
 c1005e0:	e59f210c 	ldr	r2, [pc, #268]	; c1006f4 <portG_eint_trig+0x1d0>
 c1005e4:	e5921000 	ldr	r1, [r2]
 c1005e8:	e3a00001 	mov	r0, #1
 c1005ec:	e51b2010 	ldr	r2, [fp, #-16]
 c1005f0:	e1a02210 	lsl	r2, r0, r2
 c1005f4:	e1812002 	orr	r2, r1, r2
 c1005f8:	e5832000 	str	r2, [r3]
				break;
 c1005fc:	ea000037 	b	c1006e0 <portG_eint_trig+0x1bc>
			case FALLING:
				// COMPLETAR: poner en rEXTINT a partir de la posición pos tres bits
				// a 010, para configurar interrupciones externas por flanco de
				rEXTINT &= ~(0x7 << pos);
 c100600:	e59f30ec 	ldr	r3, [pc, #236]	; c1006f4 <portG_eint_trig+0x1d0>
 c100604:	e59f20e8 	ldr	r2, [pc, #232]	; c1006f4 <portG_eint_trig+0x1d0>
 c100608:	e5921000 	ldr	r1, [r2]
 c10060c:	e3a00007 	mov	r0, #7
 c100610:	e51b2010 	ldr	r2, [fp, #-16]
 c100614:	e1a02210 	lsl	r2, r0, r2
 c100618:	e1e02002 	mvn	r2, r2
 c10061c:	e0012002 	and	r2, r1, r2
 c100620:	e5832000 	str	r2, [r3]
				rEXTINT |= (0x2 << pos);
 c100624:	e59f30c8 	ldr	r3, [pc, #200]	; c1006f4 <portG_eint_trig+0x1d0>
 c100628:	e59f20c4 	ldr	r2, [pc, #196]	; c1006f4 <portG_eint_trig+0x1d0>
 c10062c:	e5921000 	ldr	r1, [r2]
 c100630:	e3a00002 	mov	r0, #2
 c100634:	e51b2010 	ldr	r2, [fp, #-16]
 c100638:	e1a02210 	lsl	r2, r0, r2
 c10063c:	e1812002 	orr	r2, r1, r2
 c100640:	e5832000 	str	r2, [r3]
				// bajada
				break;
 c100644:	ea000025 	b	c1006e0 <portG_eint_trig+0x1bc>
			case RISING:
				// COMPLETAR: poner en rEXTINT a partir de la posición pos tres bits
				// a 100, para configurar interrupciones externas por flanco de
				rEXTINT &= ~(0x7 << pos);
 c100648:	e59f30a4 	ldr	r3, [pc, #164]	; c1006f4 <portG_eint_trig+0x1d0>
 c10064c:	e59f20a0 	ldr	r2, [pc, #160]	; c1006f4 <portG_eint_trig+0x1d0>
 c100650:	e5921000 	ldr	r1, [r2]
 c100654:	e3a00007 	mov	r0, #7
 c100658:	e51b2010 	ldr	r2, [fp, #-16]
 c10065c:	e1a02210 	lsl	r2, r0, r2
 c100660:	e1e02002 	mvn	r2, r2
 c100664:	e0012002 	and	r2, r1, r2
 c100668:	e5832000 	str	r2, [r3]
				rEXTINT |= (0x4 << pos);
 c10066c:	e59f3080 	ldr	r3, [pc, #128]	; c1006f4 <portG_eint_trig+0x1d0>
 c100670:	e59f207c 	ldr	r2, [pc, #124]	; c1006f4 <portG_eint_trig+0x1d0>
 c100674:	e5921000 	ldr	r1, [r2]
 c100678:	e3a00004 	mov	r0, #4
 c10067c:	e51b2010 	ldr	r2, [fp, #-16]
 c100680:	e1a02210 	lsl	r2, r0, r2
 c100684:	e1812002 	orr	r2, r1, r2
 c100688:	e5832000 	str	r2, [r3]

				// subida
				break;
 c10068c:	ea000013 	b	c1006e0 <portG_eint_trig+0x1bc>
			case EDGE:
				// COMPLETAR: poner en rEXTINT a partir de la posición pos tres bits
				// a 110, para configurar interrupciones externas por cualquier
				rEXTINT &= ~(0x7 << pos);
 c100690:	e59f305c 	ldr	r3, [pc, #92]	; c1006f4 <portG_eint_trig+0x1d0>
 c100694:	e59f2058 	ldr	r2, [pc, #88]	; c1006f4 <portG_eint_trig+0x1d0>
 c100698:	e5921000 	ldr	r1, [r2]
 c10069c:	e3a00007 	mov	r0, #7
 c1006a0:	e51b2010 	ldr	r2, [fp, #-16]
 c1006a4:	e1a02210 	lsl	r2, r0, r2
 c1006a8:	e1e02002 	mvn	r2, r2
 c1006ac:	e0012002 	and	r2, r1, r2
 c1006b0:	e5832000 	str	r2, [r3]
				rEXTINT |= (0x6 << pos);
 c1006b4:	e59f3038 	ldr	r3, [pc, #56]	; c1006f4 <portG_eint_trig+0x1d0>
 c1006b8:	e59f2034 	ldr	r2, [pc, #52]	; c1006f4 <portG_eint_trig+0x1d0>
 c1006bc:	e5921000 	ldr	r1, [r2]
 c1006c0:	e3a00006 	mov	r0, #6
 c1006c4:	e51b2010 	ldr	r2, [fp, #-16]
 c1006c8:	e1a02210 	lsl	r2, r0, r2
 c1006cc:	e1812002 	orr	r2, r1, r2
 c1006d0:	e5832000 	str	r2, [r3]

				// flanco
				break;
 c1006d4:	ea000001 	b	c1006e0 <portG_eint_trig+0x1bc>
			default:
				return -1;
 c1006d8:	e3e03000 	mvn	r3, #0
 c1006dc:	ea000000 	b	c1006e4 <portG_eint_trig+0x1c0>
		}
		return 0;
 c1006e0:	e3a03000 	mov	r3, #0
}
 c1006e4:	e1a00003 	mov	r0, r3
 c1006e8:	e24bd00c 	sub	sp, fp, #12
 c1006ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006f0:	e12fff1e 	bx	lr
 c1006f4:	01d20050 	.word	0x01d20050

0c1006f8 <portG_write>:

int portG_write(int pin, enum digital val)
{
 c1006f8:	e1a0c00d 	mov	ip, sp
 c1006fc:	e92dd800 	push	{fp, ip, lr, pc}
 c100700:	e24cb004 	sub	fp, ip, #4
 c100704:	e24dd010 	sub	sp, sp, #16
 c100708:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10070c:	e1a03001 	mov	r3, r1
 c100710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*2;
 c100714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100718:	e1a03083 	lsl	r3, r3, #1
 c10071c:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c100720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100724:	e3530000 	cmp	r3, #0
 c100728:	ba000002 	blt	c100738 <portG_write+0x40>
 c10072c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100730:	e3530007 	cmp	r3, #7
 c100734:	da000001 	ble	c100740 <portG_write+0x48>
		return -1; // indica error
 c100738:	e3e03000 	mvn	r3, #0
 c10073c:	ea000027 	b	c1007e0 <portG_write+0xe8>

	if (val < 0 || val > 1)
 c100740:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100744:	e3530001 	cmp	r3, #1
 c100748:	9a000001 	bls	c100754 <portG_write+0x5c>
		return -1; // indica error
 c10074c:	e3e03000 	mvn	r3, #0
 c100750:	ea000022 	b	c1007e0 <portG_write+0xe8>

	if ((rPCONG & (0x3 << pos)) != (0x1 << pos))
 c100754:	e59f3094 	ldr	r3, [pc, #148]	; c1007f0 <portG_write+0xf8>
 c100758:	e5932000 	ldr	r2, [r3]
 c10075c:	e3a01003 	mov	r1, #3
 c100760:	e51b3010 	ldr	r3, [fp, #-16]
 c100764:	e1a03311 	lsl	r3, r1, r3
 c100768:	e0022003 	and	r2, r2, r3
 c10076c:	e3a01001 	mov	r1, #1
 c100770:	e51b3010 	ldr	r3, [fp, #-16]
 c100774:	e1a03311 	lsl	r3, r1, r3
 c100778:	e1520003 	cmp	r2, r3
 c10077c:	0a000001 	beq	c100788 <portG_write+0x90>
		return -1; // indica error comprobacion si el puerto esta habilitado
 c100780:	e3e03000 	mvn	r3, #0
 c100784:	ea000015 	b	c1007e0 <portG_write+0xe8>
					//para escritura

	if (val)
 c100788:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10078c:	e3530000 	cmp	r3, #0
 c100790:	0a000008 	beq	c1007b8 <portG_write+0xc0>
		// COMPLETAR: poner en rPDATG el bit indicado por pin a 1
		rPDATG |= (0x1 << pin);
 c100794:	e59f3058 	ldr	r3, [pc, #88]	; c1007f4 <portG_write+0xfc>
 c100798:	e59f2054 	ldr	r2, [pc, #84]	; c1007f4 <portG_write+0xfc>
 c10079c:	e5921000 	ldr	r1, [r2]
 c1007a0:	e3a00001 	mov	r0, #1
 c1007a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1007a8:	e1a02210 	lsl	r2, r0, r2
 c1007ac:	e1812002 	orr	r2, r1, r2
 c1007b0:	e5832000 	str	r2, [r3]
 c1007b4:	ea000008 	b	c1007dc <portG_write+0xe4>
	else
		// COMPLETAR: poner en rPDATG el bit indicado por pin a 0
		rPDATG &= ~(0x1 << pin);
 c1007b8:	e59f3034 	ldr	r3, [pc, #52]	; c1007f4 <portG_write+0xfc>
 c1007bc:	e59f2030 	ldr	r2, [pc, #48]	; c1007f4 <portG_write+0xfc>
 c1007c0:	e5921000 	ldr	r1, [r2]
 c1007c4:	e3a00001 	mov	r0, #1
 c1007c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1007cc:	e1a02210 	lsl	r2, r0, r2
 c1007d0:	e1e02002 	mvn	r2, r2
 c1007d4:	e0012002 	and	r2, r1, r2
 c1007d8:	e5832000 	str	r2, [r3]

	return 0;
 c1007dc:	e3a03000 	mov	r3, #0
}
 c1007e0:	e1a00003 	mov	r0, r3
 c1007e4:	e24bd00c 	sub	sp, fp, #12
 c1007e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007ec:	e12fff1e 	bx	lr
 c1007f0:	01d20040 	.word	0x01d20040
 c1007f4:	01d20044 	.word	0x01d20044

0c1007f8 <portG_read>:

int portG_read(int pin, enum digital* val)
{
 c1007f8:	e1a0c00d 	mov	ip, sp
 c1007fc:	e92dd800 	push	{fp, ip, lr, pc}
 c100800:	e24cb004 	sub	fp, ip, #4
 c100804:	e24dd010 	sub	sp, sp, #16
 c100808:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10080c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	int pos = pin*2;
 c100810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100814:	e1a03083 	lsl	r3, r3, #1
 c100818:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c10081c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100820:	e3530000 	cmp	r3, #0
 c100824:	ba000002 	blt	c100834 <portG_read+0x3c>
 c100828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10082c:	e3530007 	cmp	r3, #7
 c100830:	da000001 	ble	c10083c <portG_read+0x44>
		return -1; // indica error
 c100834:	e3e03000 	mvn	r3, #0
 c100838:	ea000019 	b	c1008a4 <portG_read+0xac>

	if (rPCONG & (0x3 << pos))
 c10083c:	e59f3070 	ldr	r3, [pc, #112]	; c1008b4 <portG_read+0xbc>
 c100840:	e5932000 	ldr	r2, [r3]
 c100844:	e3a01003 	mov	r1, #3
 c100848:	e51b3010 	ldr	r3, [fp, #-16]
 c10084c:	e1a03311 	lsl	r3, r1, r3
 c100850:	e0023003 	and	r3, r2, r3
 c100854:	e3530000 	cmp	r3, #0
 c100858:	0a000001 	beq	c100864 <portG_read+0x6c>
		return -1; // indica error
 c10085c:	e3e03000 	mvn	r3, #0
 c100860:	ea00000f 	b	c1008a4 <portG_read+0xac>

	if (rPDATG &(0x1 << pin)) //pin o pos
 c100864:	e59f304c 	ldr	r3, [pc, #76]	; c1008b8 <portG_read+0xc0>
 c100868:	e5932000 	ldr	r2, [r3]
 c10086c:	e3a01001 	mov	r1, #1
 c100870:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100874:	e1a03311 	lsl	r3, r1, r3
 c100878:	e0023003 	and	r3, r2, r3
 c10087c:	e3530000 	cmp	r3, #0
 c100880:	0a000003 	beq	c100894 <portG_read+0x9c>
		*val = HIGH;
 c100884:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100888:	e3a02001 	mov	r2, #1
 c10088c:	e5c32000 	strb	r2, [r3]
 c100890:	ea000002 	b	c1008a0 <portG_read+0xa8>
	else
		*val = LOW;
 c100894:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100898:	e3a02000 	mov	r2, #0
 c10089c:	e5c32000 	strb	r2, [r3]

	return 0;
 c1008a0:	e3a03000 	mov	r3, #0
}
 c1008a4:	e1a00003 	mov	r0, r3
 c1008a8:	e24bd00c 	sub	sp, fp, #12
 c1008ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008b0:	e12fff1e 	bx	lr
 c1008b4:	01d20040 	.word	0x01d20040
 c1008b8:	01d20044 	.word	0x01d20044

0c1008bc <portG_conf_pup>:

int portG_conf_pup(int pin, enum enable st)
{
 c1008bc:	e1a0c00d 	mov	ip, sp
 c1008c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1008c4:	e24cb004 	sub	fp, ip, #4
 c1008c8:	e24dd008 	sub	sp, sp, #8
 c1008cc:	e50b0010 	str	r0, [fp, #-16]
 c1008d0:	e1a03001 	mov	r3, r1
 c1008d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 7)
 c1008d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1008dc:	e3530000 	cmp	r3, #0
 c1008e0:	ba000002 	blt	c1008f0 <portG_conf_pup+0x34>
 c1008e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1008e8:	e3530007 	cmp	r3, #7
 c1008ec:	da000001 	ble	c1008f8 <portG_conf_pup+0x3c>
		return -1; // indica error
 c1008f0:	e3e03000 	mvn	r3, #0
 c1008f4:	ea00001d 	b	c100970 <portG_conf_pup+0xb4>

	if (st != ENABLE && st != DISABLE)
 c1008f8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1008fc:	e3530001 	cmp	r3, #1
 c100900:	0a000004 	beq	c100918 <portG_conf_pup+0x5c>
 c100904:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100908:	e3530000 	cmp	r3, #0
 c10090c:	0a000001 	beq	c100918 <portG_conf_pup+0x5c>
		return -1; // indica error
 c100910:	e3e03000 	mvn	r3, #0
 c100914:	ea000015 	b	c100970 <portG_conf_pup+0xb4>

	if (st == ENABLE)
 c100918:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10091c:	e3530001 	cmp	r3, #1
 c100920:	1a000009 	bne	c10094c <portG_conf_pup+0x90>
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para activar la resistencia de pull-up
		rPUPG &= ~(0x1 << pin);
 c100924:	e59f3054 	ldr	r3, [pc, #84]	; c100980 <portG_conf_pup+0xc4>
 c100928:	e59f2050 	ldr	r2, [pc, #80]	; c100980 <portG_conf_pup+0xc4>
 c10092c:	e5921000 	ldr	r1, [r2]
 c100930:	e3a00001 	mov	r0, #1
 c100934:	e51b2010 	ldr	r2, [fp, #-16]
 c100938:	e1a02210 	lsl	r2, r0, r2
 c10093c:	e1e02002 	mvn	r2, r2
 c100940:	e0012002 	and	r2, r1, r2
 c100944:	e5832000 	str	r2, [r3]
 c100948:	ea000007 	b	c10096c <portG_conf_pup+0xb0>
	else
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para desactivar la resistencia de pull-up
		rPUPG |= (0x1 << pin);
 c10094c:	e59f302c 	ldr	r3, [pc, #44]	; c100980 <portG_conf_pup+0xc4>
 c100950:	e59f2028 	ldr	r2, [pc, #40]	; c100980 <portG_conf_pup+0xc4>
 c100954:	e5921000 	ldr	r1, [r2]
 c100958:	e3a00001 	mov	r0, #1
 c10095c:	e51b2010 	ldr	r2, [fp, #-16]
 c100960:	e1a02210 	lsl	r2, r0, r2
 c100964:	e1812002 	orr	r2, r1, r2
 c100968:	e5832000 	str	r2, [r3]

	return 0;
 c10096c:	e3a03000 	mov	r3, #0
}
 c100970:	e1a00003 	mov	r0, r3
 c100974:	e24bd00c 	sub	sp, fp, #12
 c100978:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10097c:	e12fff1e 	bx	lr
 c100980:	01d20048 	.word	0x01d20048

0c100984 <start>:
	.equ rINTMSK,    0x1e0000c

start:

	/* Pasa a modo supervisor */
    mrs	r0, cpsr
 c100984:	e10f0000 	mrs	r0, CPSR
    bic	r0, r0, #MODEMASK
 c100988:	e3c0001f 	bic	r0, r0, #31
    orr	r1, r0, #SVCMODE
 c10098c:	e3801013 	orr	r1, r0, #19
    msr	cpsr_c, r1 
 c100990:	e121f001 	msr	CPSR_c, r1

	/* Enmascara interrupciones */
	ldr r0, =rINTMSK
 c100994:	e59f0094 	ldr	r0, [pc, #148]	; c100a30 <InitStacks+0x48>
	ldr r1, =0x1fffffff
 c100998:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
    str r1, [r0]
 c10099c:	e5801000 	str	r1, [r0]

	/* Habilita linea IRQ y FIQ del CPSR */
	mrs r0, cpsr
 c1009a0:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0xC0
 c1009a4:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	msr cpsr_c, r0
 c1009a8:	e121f000 	msr	CPSR_c, r0
	
	/* InicializaciÃ³n de la secciÃ³n bss a 0, estÃ¡ndar C */
    ldr	    r3, =Image_ZI_Base
 c1009ac:	e59f3080 	ldr	r3, [pc, #128]	; c100a34 <InitStacks+0x4c>
	ldr	    r1, =Image_ZI_Limit	/* Top of zero init segment */
 c1009b0:	e59f1080 	ldr	r1, [pc, #128]	; c100a38 <InitStacks+0x50>
    mov	    r2, #0
 c1009b4:	e3a02000 	mov	r2, #0

0c1009b8 <L0>:
L0:
    cmp	    r3, r1	    		/* Zero init */
 c1009b8:	e1530001 	cmp	r3, r1
    strcc   r2, [r3], #4
 c1009bc:	34832004 	strcc	r2, [r3], #4
    bcc	    L0
 c1009c0:	3afffffc 	bcc	c1009b8 <L0>
	/****************************************************/

	/* Desde modo SVC inicializa los SP de todos los modos de ejecuciï¿½n privilegiados */
    bl InitStacks
 c1009c4:	eb000007 	bl	c1009e8 <InitStacks>
	
	/* Desde modo SVC cambia a modo USR e inicializa el SP_usr */
	mrs r0, cpsr
 c1009c8:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c1009cc:	e3c0001f 	bic	r0, r0, #31
	orr r1, r0, #USRMODE  
 c1009d0:	e3801010 	orr	r1, r0, #16
	msr cpsr_c, r1
 c1009d4:	e121f001 	msr	CPSR_c, r1
	ldr sp, =USRSTACK
 c1009d8:	e59fd05c 	ldr	sp, [pc, #92]	; c100a3c <InitStacks+0x54>

    mov fp, #0
 c1009dc:	e3a0b000 	mov	fp, #0

    bl main
 c1009e0:	eb000383 	bl	c1017f4 <main>

0c1009e4 <End>:

End:
    B End
 c1009e4:	eafffffe 	b	c1009e4 <End>

0c1009e8 <InitStacks>:

InitStacks:
	mrs r0, cpsr
 c1009e8:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c1009ec:	e3c0001f 	bic	r0, r0, #31

	orr r1, r0, #UNDMODE  /* desde modo SVC cambia a modo UND e inicializa el SP_und */
 c1009f0:	e380101b 	orr	r1, r0, #27
	msr cpsr_c, r1    
 c1009f4:	e121f001 	msr	CPSR_c, r1
	ldr sp, =UNDSTACK
 c1009f8:	e59fd040 	ldr	sp, [pc, #64]	; c100a40 <InitStacks+0x58>

	orr r1, r0, #ABTMODE  /* desde modo UND cambia a modo ABT e inicializa el SP_abt */
 c1009fc:	e3801017 	orr	r1, r0, #23
	msr cpsr_c, r1 
 c100a00:	e121f001 	msr	CPSR_c, r1
	ldr sp, =ABTSTACK
 c100a04:	e59fd038 	ldr	sp, [pc, #56]	; c100a44 <InitStacks+0x5c>

	orr r1, r0, #IRQMODE  /* desde modo ABT cambia a modo IRQ e inicializa el SP_abt */
 c100a08:	e3801012 	orr	r1, r0, #18
	msr cpsr_c, r1
 c100a0c:	e121f001 	msr	CPSR_c, r1
	ldr sp, =IRQSTACK
 c100a10:	e59fd030 	ldr	sp, [pc, #48]	; c100a48 <InitStacks+0x60>

	orr r1, r0, #FIQMODE  /* desde modo IRQ cambia a modo FIQ e inicializa el SP_fiq */
 c100a14:	e3801011 	orr	r1, r0, #17
	msr cpsr_c, r1
 c100a18:	e121f001 	msr	CPSR_c, r1
	ldr sp, =FIQSTACK
 c100a1c:	e59fd028 	ldr	sp, [pc, #40]	; c100a4c <InitStacks+0x64>

	orr r1, r0, #SVCMODE  /* desde modo FIQ cambia a modo SVC e inicializa el SP_svc */
 c100a20:	e3801013 	orr	r1, r0, #19
	msr cpsr_c, r1
 c100a24:	e121f001 	msr	CPSR_c, r1
	ldr sp, =SVCSTACK
 c100a28:	e59fd020 	ldr	sp, [pc, #32]	; c100a50 <InitStacks+0x68>
	
    mov pc, lr
 c100a2c:	e1a0f00e 	mov	pc, lr
 c100a30:	01e0000c 	.word	0x01e0000c
 c100a34:	0c1000d4 	.word	0x0c1000d4
 c100a38:	0c1000e4 	.word	0x0c1000e4
 c100a3c:	0c7ff000 	.word	0x0c7ff000
 c100a40:	0c7ff200 	.word	0x0c7ff200
 c100a44:	0c7ff300 	.word	0x0c7ff300
 c100a48:	0c7ff400 	.word	0x0c7ff400
 c100a4c:	0c7ff500 	.word	0x0c7ff500
 c100a50:	0c7ff100 	.word	0x0c7ff100

0c100a54 <ic_init>:

#include "44b.h"
#include "intcontroller.h"

void ic_init(void)
{
 c100a54:	e1a0c00d 	mov	ip, sp
 c100a58:	e92dd800 	push	{fp, ip, lr, pc}
 c100a5c:	e24cb004 	sub	fp, ip, #4
	 *    Activate IRQ and FIQ lines
	 *    IRQ line in non-vectorized mode
	 *    Everything through IRQ line
	 *    All interruptions masked
	 **/
	rINTMOD = 0x0; // Configuration of lines as IRQ
 c100a60:	e59f3028 	ldr	r3, [pc, #40]	; c100a90 <ic_init+0x3c>
 c100a64:	e3a02000 	mov	r2, #0
 c100a68:	e5832000 	str	r2, [r3]
	rINTCON = 0x7; // IRQ and FIQ masked, IRQ in non-vectorized mode
 c100a6c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100a70:	e3a02007 	mov	r2, #7
 c100a74:	e5832000 	str	r2, [r3]
	rINTMSK = ~(0x0); // Mask all the lines
 c100a78:	e59f3014 	ldr	r3, [pc, #20]	; c100a94 <ic_init+0x40>
 c100a7c:	e3e02000 	mvn	r2, #0
 c100a80:	e5832000 	str	r2, [r3]
}
 c100a84:	e24bd00c 	sub	sp, fp, #12
 c100a88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a8c:	e12fff1e 	bx	lr
 c100a90:	01e00008 	.word	0x01e00008
 c100a94:	01e0000c 	.word	0x01e0000c

0c100a98 <ic_conf_irq>:

int ic_conf_irq(enum enable st, enum int_vec vec)
{
 c100a98:	e1a0c00d 	mov	ip, sp
 c100a9c:	e92dd800 	push	{fp, ip, lr, pc}
 c100aa0:	e24cb004 	sub	fp, ip, #4
 c100aa4:	e24dd010 	sub	sp, sp, #16
 c100aa8:	e1a02000 	mov	r2, r0
 c100aac:	e1a03001 	mov	r3, r1
 c100ab0:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c100ab4:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int conf = rINTCON;
 c100ab8:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100abc:	e5933000 	ldr	r3, [r3]
 c100ac0:	e50b3010 	str	r3, [fp, #-16]

	if (st != ENABLE && st != DISABLE)
 c100ac4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100ac8:	e3530001 	cmp	r3, #1
 c100acc:	0a000004 	beq	c100ae4 <ic_conf_irq+0x4c>
 c100ad0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100ad4:	e3530000 	cmp	r3, #0
 c100ad8:	0a000001 	beq	c100ae4 <ic_conf_irq+0x4c>
		return -1;
 c100adc:	e3e03000 	mvn	r3, #0
 c100ae0:	ea000017 	b	c100b44 <ic_conf_irq+0xac>

	if (vec == VEC)
 c100ae4:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100ae8:	e3530000 	cmp	r3, #0
 c100aec:	1a000003 	bne	c100b00 <ic_conf_irq+0x68>
		// Set bit 2 of conf to 0, for establishing IRQ line in vectorized mode
		conf &= ~(0x1 << 2);
 c100af0:	e51b3010 	ldr	r3, [fp, #-16]
 c100af4:	e3c33004 	bic	r3, r3, #4
 c100af8:	e50b3010 	str	r3, [fp, #-16]
 c100afc:	ea000002 	b	c100b0c <ic_conf_irq+0x74>
	else
		// Set bit 2 of conf to 1, for establishing IRQ line in non-vectorized mode
		conf |= (0x1 << 2);
 c100b00:	e51b3010 	ldr	r3, [fp, #-16]
 c100b04:	e3833004 	orr	r3, r3, #4
 c100b08:	e50b3010 	str	r3, [fp, #-16]
	if (st == ENABLE)
 c100b0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100b10:	e3530001 	cmp	r3, #1
 c100b14:	1a000003 	bne	c100b28 <ic_conf_irq+0x90>
		// Set bit 1 of conf to 0, for enabling IRQ line
		conf &= ~(0x1 << 1);
 c100b18:	e51b3010 	ldr	r3, [fp, #-16]
 c100b1c:	e3c33002 	bic	r3, r3, #2
 c100b20:	e50b3010 	str	r3, [fp, #-16]
 c100b24:	ea000002 	b	c100b34 <ic_conf_irq+0x9c>

	else
		// Set bit 1 of conf to 1, for masking IRQ line
		conf |= (0x1 << 1);
 c100b28:	e51b3010 	ldr	r3, [fp, #-16]
 c100b2c:	e3833002 	orr	r3, r3, #2
 c100b30:	e50b3010 	str	r3, [fp, #-16]

	rINTCON = conf;
 c100b34:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100b38:	e51b2010 	ldr	r2, [fp, #-16]
 c100b3c:	e5832000 	str	r2, [r3]
	return 0;
 c100b40:	e3a03000 	mov	r3, #0
}
 c100b44:	e1a00003 	mov	r0, r3
 c100b48:	e24bd00c 	sub	sp, fp, #12
 c100b4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b50:	e12fff1e 	bx	lr

0c100b54 <ic_conf_fiq>:

int ic_conf_fiq(enum enable st)
{
 c100b54:	e1a0c00d 	mov	ip, sp
 c100b58:	e92dd800 	push	{fp, ip, lr, pc}
 c100b5c:	e24cb004 	sub	fp, ip, #4
 c100b60:	e24dd010 	sub	sp, sp, #16
 c100b64:	e1a03000 	mov	r3, r0
 c100b68:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c100b6c:	e3a03000 	mov	r3, #0
 c100b70:	e50b3010 	str	r3, [fp, #-16]

	if (st == ENABLE)
 c100b74:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100b78:	e3530001 	cmp	r3, #1
 c100b7c:	1a000005 	bne	c100b98 <ic_conf_fiq+0x44>
		// Set bit 0 of rINTCON to 0, for enabling FIQ line
		rTCON &= ~(0x1);
 c100b80:	e59f3050 	ldr	r3, [pc, #80]	; c100bd8 <ic_conf_fiq+0x84>
 c100b84:	e59f204c 	ldr	r2, [pc, #76]	; c100bd8 <ic_conf_fiq+0x84>
 c100b88:	e5922000 	ldr	r2, [r2]
 c100b8c:	e3c22001 	bic	r2, r2, #1
 c100b90:	e5832000 	str	r2, [r3]
 c100b94:	ea00000a 	b	c100bc4 <ic_conf_fiq+0x70>
	else if (st == DISABLE)
 c100b98:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100b9c:	e3530000 	cmp	r3, #0
 c100ba0:	1a000005 	bne	c100bbc <ic_conf_fiq+0x68>
		// Set bit 0 of rINTCON to 1, for masking FIQ line
		rTCON |= (0x1);
 c100ba4:	e59f302c 	ldr	r3, [pc, #44]	; c100bd8 <ic_conf_fiq+0x84>
 c100ba8:	e59f2028 	ldr	r2, [pc, #40]	; c100bd8 <ic_conf_fiq+0x84>
 c100bac:	e5922000 	ldr	r2, [r2]
 c100bb0:	e3822001 	orr	r2, r2, #1
 c100bb4:	e5832000 	str	r2, [r3]
 c100bb8:	ea000001 	b	c100bc4 <ic_conf_fiq+0x70>
	else
		ret = -1;
 c100bbc:	e3e03000 	mvn	r3, #0
 c100bc0:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c100bc4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100bc8:	e1a00003 	mov	r0, r3
 c100bcc:	e24bd00c 	sub	sp, fp, #12
 c100bd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100bd4:	e12fff1e 	bx	lr
 c100bd8:	01d50008 	.word	0x01d50008

0c100bdc <ic_conf_line>:

int ic_conf_line(enum int_line line, enum int_mode mode)
{
 c100bdc:	e1a0c00d 	mov	ip, sp
 c100be0:	e92dd800 	push	{fp, ip, lr, pc}
 c100be4:	e24cb004 	sub	fp, ip, #4
 c100be8:	e24dd010 	sub	sp, sp, #16
 c100bec:	e1a02000 	mov	r2, r0
 c100bf0:	e1a03001 	mov	r3, r1
 c100bf4:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c100bf8:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	unsigned int bit = INT_BIT(line);
 c100bfc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100c00:	e3a02001 	mov	r2, #1
 c100c04:	e1a03312 	lsl	r3, r2, r3
 c100c08:	e50b3010 	str	r3, [fp, #-16]

	if (line < 0 || line > 26)
 c100c0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100c10:	e353001a 	cmp	r3, #26
 c100c14:	9a000001 	bls	c100c20 <ic_conf_line+0x44>
		return -1;
 c100c18:	e3e03000 	mvn	r3, #0
 c100c1c:	ea000019 	b	c100c88 <ic_conf_line+0xac>

	if (mode != IRQ || mode != FIQ)
 c100c20:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100c24:	e3530000 	cmp	r3, #0
 c100c28:	1a000002 	bne	c100c38 <ic_conf_line+0x5c>
 c100c2c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100c30:	e3530001 	cmp	r3, #1
 c100c34:	0a000001 	beq	c100c40 <ic_conf_line+0x64>
		return -1;
 c100c38:	e3e03000 	mvn	r3, #0
 c100c3c:	ea000011 	b	c100c88 <ic_conf_line+0xac>

	if (mode == IRQ)
 c100c40:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100c44:	e3530000 	cmp	r3, #0
 c100c48:	1a000007 	bne	c100c6c <ic_conf_line+0x90>
		// Set bit "bit" of rINTMOD to 0, for establishing line "line" in IRQ mode
		rINTMOD &= ~(bit);
 c100c4c:	e59f3044 	ldr	r3, [pc, #68]	; c100c98 <ic_conf_line+0xbc>
 c100c50:	e59f2040 	ldr	r2, [pc, #64]	; c100c98 <ic_conf_line+0xbc>
 c100c54:	e5921000 	ldr	r1, [r2]
 c100c58:	e51b2010 	ldr	r2, [fp, #-16]
 c100c5c:	e1e02002 	mvn	r2, r2
 c100c60:	e0012002 	and	r2, r1, r2
 c100c64:	e5832000 	str	r2, [r3]
 c100c68:	ea000005 	b	c100c84 <ic_conf_line+0xa8>
	else
		// Set bit "bit" of rINTMOD to 1, for establishing line "line" in FIQ mode
		rINTMOD |= (bit);
 c100c6c:	e59f3024 	ldr	r3, [pc, #36]	; c100c98 <ic_conf_line+0xbc>
 c100c70:	e59f2020 	ldr	r2, [pc, #32]	; c100c98 <ic_conf_line+0xbc>
 c100c74:	e5921000 	ldr	r1, [r2]
 c100c78:	e51b2010 	ldr	r2, [fp, #-16]
 c100c7c:	e1812002 	orr	r2, r1, r2
 c100c80:	e5832000 	str	r2, [r3]
	return 0;
 c100c84:	e3a03000 	mov	r3, #0
}
 c100c88:	e1a00003 	mov	r0, r3
 c100c8c:	e24bd00c 	sub	sp, fp, #12
 c100c90:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c94:	e12fff1e 	bx	lr
 c100c98:	01e00008 	.word	0x01e00008

0c100c9c <ic_enable>:

int ic_enable(enum int_line line)
{
 c100c9c:	e1a0c00d 	mov	ip, sp
 c100ca0:	e92dd800 	push	{fp, ip, lr, pc}
 c100ca4:	e24cb004 	sub	fp, ip, #4
 c100ca8:	e24dd008 	sub	sp, sp, #8
 c100cac:	e1a03000 	mov	r3, r0
 c100cb0:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c100cb4:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cb8:	e353001a 	cmp	r3, #26
 c100cbc:	9a000001 	bls	c100cc8 <ic_enable+0x2c>
		return -1;
 c100cc0:	e3e03000 	mvn	r3, #0
 c100cc4:	ea00000e 	b	c100d04 <ic_enable+0x68>

	// Set bit of rINTMSK corresponding to line "line" to 0, for enabling interruptions through that line
	rINTMSK &= ~(0x1 << 26);
 c100cc8:	e59f3044 	ldr	r3, [pc, #68]	; c100d14 <ic_enable+0x78>
 c100ccc:	e59f2040 	ldr	r2, [pc, #64]	; c100d14 <ic_enable+0x78>
 c100cd0:	e5922000 	ldr	r2, [r2]
 c100cd4:	e3c22301 	bic	r2, r2, #67108864	; 0x4000000
 c100cd8:	e5832000 	str	r2, [r3]
	rINTMSK &= ~(INT_BIT(line));
 c100cdc:	e59f3030 	ldr	r3, [pc, #48]	; c100d14 <ic_enable+0x78>
 c100ce0:	e59f202c 	ldr	r2, [pc, #44]	; c100d14 <ic_enable+0x78>
 c100ce4:	e5921000 	ldr	r1, [r2]
 c100ce8:	e55b200d 	ldrb	r2, [fp, #-13]
 c100cec:	e3a00001 	mov	r0, #1
 c100cf0:	e1a02210 	lsl	r2, r0, r2
 c100cf4:	e1e02002 	mvn	r2, r2
 c100cf8:	e0012002 	and	r2, r1, r2
 c100cfc:	e5832000 	str	r2, [r3]
	return 0;
 c100d00:	e3a03000 	mov	r3, #0
}
 c100d04:	e1a00003 	mov	r0, r3
 c100d08:	e24bd00c 	sub	sp, fp, #12
 c100d0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d10:	e12fff1e 	bx	lr
 c100d14:	01e0000c 	.word	0x01e0000c

0c100d18 <ic_disable>:

int ic_disable(enum int_line line)
{
 c100d18:	e1a0c00d 	mov	ip, sp
 c100d1c:	e92dd800 	push	{fp, ip, lr, pc}
 c100d20:	e24cb004 	sub	fp, ip, #4
 c100d24:	e24dd008 	sub	sp, sp, #8
 c100d28:	e1a03000 	mov	r3, r0
 c100d2c:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c100d30:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d34:	e353001a 	cmp	r3, #26
 c100d38:	9a000001 	bls	c100d44 <ic_disable+0x2c>
		return -1;
 c100d3c:	e3e03000 	mvn	r3, #0
 c100d40:	ea000008 	b	c100d68 <ic_disable+0x50>

	// Set bit of rINTMSK corresponding to line "line" to 1, for masking interruptions through that line
	rINTMSK |= (INT_BIT(line));
 c100d44:	e59f302c 	ldr	r3, [pc, #44]	; c100d78 <ic_disable+0x60>
 c100d48:	e59f2028 	ldr	r2, [pc, #40]	; c100d78 <ic_disable+0x60>
 c100d4c:	e5921000 	ldr	r1, [r2]
 c100d50:	e55b200d 	ldrb	r2, [fp, #-13]
 c100d54:	e3a00001 	mov	r0, #1
 c100d58:	e1a02210 	lsl	r2, r0, r2
 c100d5c:	e1812002 	orr	r2, r1, r2
 c100d60:	e5832000 	str	r2, [r3]
	return 0;
 c100d64:	e3a03000 	mov	r3, #0
}
 c100d68:	e1a00003 	mov	r0, r3
 c100d6c:	e24bd00c 	sub	sp, fp, #12
 c100d70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d74:	e12fff1e 	bx	lr
 c100d78:	01e0000c 	.word	0x01e0000c

0c100d7c <ic_cleanflag>:

int ic_cleanflag(enum int_line line)
{
 c100d7c:	e1a0c00d 	mov	ip, sp
 c100d80:	e92dd800 	push	{fp, ip, lr, pc}
 c100d84:	e24cb004 	sub	fp, ip, #4
 c100d88:	e24dd010 	sub	sp, sp, #16
 c100d8c:	e1a03000 	mov	r3, r0
 c100d90:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int bit;

	if (line < 0 || line > 26)
 c100d94:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100d98:	e353001a 	cmp	r3, #26
 c100d9c:	9a000001 	bls	c100da8 <ic_cleanflag+0x2c>
		return -1;
 c100da0:	e3e03000 	mvn	r3, #0
 c100da4:	ea000017 	b	c100e08 <ic_cleanflag+0x8c>

	bit = INT_BIT(line);
 c100da8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100dac:	e3a02001 	mov	r2, #1
 c100db0:	e1a03312 	lsl	r3, r2, r3
 c100db4:	e50b3010 	str	r3, [fp, #-16]

	if (rINTMOD & line)
 c100db8:	e59f3058 	ldr	r3, [pc, #88]	; c100e18 <ic_cleanflag+0x9c>
 c100dbc:	e5932000 	ldr	r2, [r3]
 c100dc0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100dc4:	e0023003 	and	r3, r2, r3
 c100dc8:	e3530000 	cmp	r3, #0
 c100dcc:	0a000006 	beq	c100dec <ic_cleanflag+0x70>
		// Erase interruption flag corresponding to line "line" with line configured through FIQ
		rF_ISPC |= bit;
 c100dd0:	e59f3044 	ldr	r3, [pc, #68]	; c100e1c <ic_cleanflag+0xa0>
 c100dd4:	e59f2040 	ldr	r2, [pc, #64]	; c100e1c <ic_cleanflag+0xa0>
 c100dd8:	e5921000 	ldr	r1, [r2]
 c100ddc:	e51b2010 	ldr	r2, [fp, #-16]
 c100de0:	e1812002 	orr	r2, r1, r2
 c100de4:	e5832000 	str	r2, [r3]
 c100de8:	ea000005 	b	c100e04 <ic_cleanflag+0x88>
	else
		// Erase interruption flag corresponding to line "line" with line configured through IRQ
		rI_ISPC |= bit;
 c100dec:	e59f302c 	ldr	r3, [pc, #44]	; c100e20 <ic_cleanflag+0xa4>
 c100df0:	e59f2028 	ldr	r2, [pc, #40]	; c100e20 <ic_cleanflag+0xa4>
 c100df4:	e5921000 	ldr	r1, [r2]
 c100df8:	e51b2010 	ldr	r2, [fp, #-16]
 c100dfc:	e1812002 	orr	r2, r1, r2
 c100e00:	e5832000 	str	r2, [r3]
	return 0;
 c100e04:	e3a03000 	mov	r3, #0
}
 c100e08:	e1a00003 	mov	r0, r3
 c100e0c:	e24bd00c 	sub	sp, fp, #12
 c100e10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e14:	e12fff1e 	bx	lr
 c100e18:	01e00008 	.word	0x01e00008
 c100e1c:	01e0003c 	.word	0x01e0003c
 c100e20:	01e00024 	.word	0x01e00024

0c100e24 <kb_scan>:
/*--- Variables globales ---*/
volatile static unsigned char *keyboard_base = (unsigned char *)0x06000000;


int kb_scan(void)
{
 c100e24:	e1a0c00d 	mov	ip, sp
 c100e28:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c100e2c:	e24cb004 	sub	fp, ip, #4
 c100e30:	e24dd064 	sub	sp, sp, #100	; 0x64
	int value = -1;
 c100e34:	e3e03000 	mvn	r3, #0
 c100e38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	int i;
	char temp;
	int lines[4]  = {0xfd, 0xfb, 0xf7, 0xef};
 c100e3c:	e59f3184 	ldr	r3, [pc, #388]	; c100fc8 <kb_scan+0x1a4>
 c100e40:	e24bc030 	sub	ip, fp, #48	; 0x30
 c100e44:	e893000f 	ldm	r3, {r0, r1, r2, r3}
 c100e48:	e88c000f 	stm	ip, {r0, r1, r2, r3}
	int map[4][4] = {{0, 1, 2, 3},
 c100e4c:	e59f3178 	ldr	r3, [pc, #376]	; c100fcc <kb_scan+0x1a8>
 c100e50:	e24bc070 	sub	ip, fp, #112	; 0x70
 c100e54:	e1a04003 	mov	r4, r3
 c100e58:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c100e5c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c100e60:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c100e64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c100e68:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c100e6c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c100e70:	e894000f 	ldm	r4, {r0, r1, r2, r3}
 c100e74:	e88c000f 	stm	ip, {r0, r1, r2, r3}
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c100e78:	e3a03000 	mov	r3, #0
 c100e7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c100e80:	ea000045 	b	c100f9c <kb_scan+0x178>
		temp = *(keyboard_base+lines[i]);
 c100e84:	e59f3144 	ldr	r3, [pc, #324]	; c100fd0 <kb_scan+0x1ac>
 c100e88:	e5932000 	ldr	r2, [r3]
 c100e8c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c100e90:	e3e0301b 	mvn	r3, #27
 c100e94:	e1a01101 	lsl	r1, r1, #2
 c100e98:	e24b0014 	sub	r0, fp, #20
 c100e9c:	e0801001 	add	r1, r0, r1
 c100ea0:	e0813003 	add	r3, r1, r3
 c100ea4:	e5933000 	ldr	r3, [r3]
 c100ea8:	e0823003 	add	r3, r2, r3
 c100eac:	e5d33000 	ldrb	r3, [r3]
 c100eb0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3

		if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK) {
 c100eb4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100eb8:	e203300f 	and	r3, r3, #15
 c100ebc:	e353000f 	cmp	r3, #15
 c100ec0:	0a000032 	beq	c100f90 <kb_scan+0x16c>
			if( (temp&0x1) == 0 )
 c100ec4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100ec8:	e2033001 	and	r3, r3, #1
 c100ecc:	e3530000 	cmp	r3, #0
 c100ed0:	1a000008 	bne	c100ef8 <kb_scan+0xd4>
				value = map[i][3];
 c100ed4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100ed8:	e3e0304f 	mvn	r3, #79	; 0x4f
 c100edc:	e1a02202 	lsl	r2, r2, #4
 c100ee0:	e24b1014 	sub	r1, fp, #20
 c100ee4:	e0812002 	add	r2, r1, r2
 c100ee8:	e0823003 	add	r3, r2, r3
 c100eec:	e5933000 	ldr	r3, [r3]
 c100ef0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100ef4:	ea000025 	b	c100f90 <kb_scan+0x16c>
			else if( (temp&0x2) == 0 )
 c100ef8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100efc:	e2033002 	and	r3, r3, #2
 c100f00:	e3530000 	cmp	r3, #0
 c100f04:	1a000008 	bne	c100f2c <kb_scan+0x108>
				value = map[i][2];
 c100f08:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100f0c:	e3e03053 	mvn	r3, #83	; 0x53
 c100f10:	e1a02202 	lsl	r2, r2, #4
 c100f14:	e24b0014 	sub	r0, fp, #20
 c100f18:	e0802002 	add	r2, r0, r2
 c100f1c:	e0823003 	add	r3, r2, r3
 c100f20:	e5933000 	ldr	r3, [r3]
 c100f24:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100f28:	ea000018 	b	c100f90 <kb_scan+0x16c>
			else if( (temp&0x4) == 0 )
 c100f2c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100f30:	e2033004 	and	r3, r3, #4
 c100f34:	e3530000 	cmp	r3, #0
 c100f38:	1a000008 	bne	c100f60 <kb_scan+0x13c>
				value = map[i][1];
 c100f3c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100f40:	e3e03057 	mvn	r3, #87	; 0x57
 c100f44:	e1a02202 	lsl	r2, r2, #4
 c100f48:	e24b1014 	sub	r1, fp, #20
 c100f4c:	e0812002 	add	r2, r1, r2
 c100f50:	e0823003 	add	r3, r2, r3
 c100f54:	e5933000 	ldr	r3, [r3]
 c100f58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100f5c:	ea00000b 	b	c100f90 <kb_scan+0x16c>
			else if( (temp&0x8) == 0 )
 c100f60:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100f64:	e2033008 	and	r3, r3, #8
 c100f68:	e3530000 	cmp	r3, #0
 c100f6c:	1a000007 	bne	c100f90 <kb_scan+0x16c>
				value = map[i][0];
 c100f70:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100f74:	e3e0305b 	mvn	r3, #91	; 0x5b
 c100f78:	e1a02202 	lsl	r2, r2, #4
 c100f7c:	e24b0014 	sub	r0, fp, #20
 c100f80:	e0802002 	add	r2, r0, r2
 c100f84:	e0823003 	add	r3, r2, r3
 c100f88:	e5933000 	ldr	r3, [r3]
 c100f8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	int map[4][4] = {{0, 1, 2, 3},
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c100f90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100f94:	e2833001 	add	r3, r3, #1
 c100f98:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 c100f9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100fa0:	e3530003 	cmp	r3, #3
 c100fa4:	ca000002 	bgt	c100fb4 <kb_scan+0x190>
 c100fa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100fac:	e3730001 	cmn	r3, #1
 c100fb0:	0affffb3 	beq	c100e84 <kb_scan+0x60>
			else if( (temp&0x8) == 0 )
				value = map[i][0];
		}
	}

	return value;
 c100fb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 c100fb8:	e1a00003 	mov	r0, r3
 c100fbc:	e24bd010 	sub	sp, fp, #16
 c100fc0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c100fc4:	e12fff1e 	bx	lr
 c100fc8:	0c100084 	.word	0x0c100084
 c100fcc:	0c100094 	.word	0x0c100094
 c100fd0:	0c100064 	.word	0x0c100064

0c100fd4 <leds_init>:
// significativos, cada uno para un led
// 1 encendido y 0 apagado
static unsigned int status = 0;

void leds_init( void )
{
 c100fd4:	e1a0c00d 	mov	ip, sp
 c100fd8:	e92dd800 	push	{fp, ip, lr, pc}
 c100fdc:	e24cb004 	sub	fp, ip, #4
	//COMPLETAR usando el interfaz del puerto B definido en gpio.h
	// hay que configurar los pines 9 y 10 como pines de salida
	portB_conf(BIT_LED1, OUTPUT);
 c100fe0:	e3a00009 	mov	r0, #9
 c100fe4:	e3a01001 	mov	r1, #1
 c100fe8:	ebfffc92 	bl	c100238 <portB_conf>
	portB_conf(BIT_LED2, OUTPUT);
 c100fec:	e3a0000a 	mov	r0, #10
 c100ff0:	e3a01001 	mov	r1, #1
 c100ff4:	ebfffc8f 	bl	c100238 <portB_conf>

	leds_display( status );
 c100ff8:	e59f3014 	ldr	r3, [pc, #20]	; c101014 <leds_init+0x40>
 c100ffc:	e5933000 	ldr	r3, [r3]
 c101000:	e1a00003 	mov	r0, r3
 c101004:	eb000073 	bl	c1011d8 <leds_display>
}
 c101008:	e24bd00c 	sub	sp, fp, #12
 c10100c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101010:	e12fff1e 	bx	lr
 c101014:	0c1000d4 	.word	0x0c1000d4

0c101018 <led1_on>:

void led1_on( void )
{
 c101018:	e1a0c00d 	mov	ip, sp
 c10101c:	e92dd800 	push	{fp, ip, lr, pc}
 c101020:	e24cb004 	sub	fp, ip, #4
	status |=  LED1;
 c101024:	e59f3028 	ldr	r3, [pc, #40]	; c101054 <led1_on+0x3c>
 c101028:	e5933000 	ldr	r3, [r3]
 c10102c:	e3832001 	orr	r2, r3, #1
 c101030:	e59f301c 	ldr	r3, [pc, #28]	; c101054 <led1_on+0x3c>
 c101034:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101038:	e59f3014 	ldr	r3, [pc, #20]	; c101054 <led1_on+0x3c>
 c10103c:	e5933000 	ldr	r3, [r3]
 c101040:	e1a00003 	mov	r0, r3
 c101044:	eb000063 	bl	c1011d8 <leds_display>
}
 c101048:	e24bd00c 	sub	sp, fp, #12
 c10104c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101050:	e12fff1e 	bx	lr
 c101054:	0c1000d4 	.word	0x0c1000d4

0c101058 <led1_off>:

void led1_off( void )
{
 c101058:	e1a0c00d 	mov	ip, sp
 c10105c:	e92dd800 	push	{fp, ip, lr, pc}
 c101060:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED1;
 c101064:	e59f3028 	ldr	r3, [pc, #40]	; c101094 <led1_off+0x3c>
 c101068:	e5933000 	ldr	r3, [r3]
 c10106c:	e3c32001 	bic	r2, r3, #1
 c101070:	e59f301c 	ldr	r3, [pc, #28]	; c101094 <led1_off+0x3c>
 c101074:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101078:	e59f3014 	ldr	r3, [pc, #20]	; c101094 <led1_off+0x3c>
 c10107c:	e5933000 	ldr	r3, [r3]
 c101080:	e1a00003 	mov	r0, r3
 c101084:	eb000053 	bl	c1011d8 <leds_display>
}
 c101088:	e24bd00c 	sub	sp, fp, #12
 c10108c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101090:	e12fff1e 	bx	lr
 c101094:	0c1000d4 	.word	0x0c1000d4

0c101098 <led2_on>:

void led2_on( void )
{
 c101098:	e1a0c00d 	mov	ip, sp
 c10109c:	e92dd800 	push	{fp, ip, lr, pc}
 c1010a0:	e24cb004 	sub	fp, ip, #4
	status |=  LED2;
 c1010a4:	e59f3028 	ldr	r3, [pc, #40]	; c1010d4 <led2_on+0x3c>
 c1010a8:	e5933000 	ldr	r3, [r3]
 c1010ac:	e3832002 	orr	r2, r3, #2
 c1010b0:	e59f301c 	ldr	r3, [pc, #28]	; c1010d4 <led2_on+0x3c>
 c1010b4:	e5832000 	str	r2, [r3]
	leds_display( status );
 c1010b8:	e59f3014 	ldr	r3, [pc, #20]	; c1010d4 <led2_on+0x3c>
 c1010bc:	e5933000 	ldr	r3, [r3]
 c1010c0:	e1a00003 	mov	r0, r3
 c1010c4:	eb000043 	bl	c1011d8 <leds_display>
}
 c1010c8:	e24bd00c 	sub	sp, fp, #12
 c1010cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010d0:	e12fff1e 	bx	lr
 c1010d4:	0c1000d4 	.word	0x0c1000d4

0c1010d8 <led2_off>:

void led2_off( void )
{
 c1010d8:	e1a0c00d 	mov	ip, sp
 c1010dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1010e0:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED2;
 c1010e4:	e59f3028 	ldr	r3, [pc, #40]	; c101114 <led2_off+0x3c>
 c1010e8:	e5933000 	ldr	r3, [r3]
 c1010ec:	e3c32002 	bic	r2, r3, #2
 c1010f0:	e59f301c 	ldr	r3, [pc, #28]	; c101114 <led2_off+0x3c>
 c1010f4:	e5832000 	str	r2, [r3]
	leds_display( status );
 c1010f8:	e59f3014 	ldr	r3, [pc, #20]	; c101114 <led2_off+0x3c>
 c1010fc:	e5933000 	ldr	r3, [r3]
 c101100:	e1a00003 	mov	r0, r3
 c101104:	eb000033 	bl	c1011d8 <leds_display>
}
 c101108:	e24bd00c 	sub	sp, fp, #12
 c10110c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101110:	e12fff1e 	bx	lr
 c101114:	0c1000d4 	.word	0x0c1000d4

0c101118 <led1_switch>:

void led1_switch( void )
{
 c101118:	e1a0c00d 	mov	ip, sp
 c10111c:	e92dd800 	push	{fp, ip, lr, pc}
 c101120:	e24cb004 	sub	fp, ip, #4
	status ^= LED1;
 c101124:	e59f3028 	ldr	r3, [pc, #40]	; c101154 <led1_switch+0x3c>
 c101128:	e5933000 	ldr	r3, [r3]
 c10112c:	e2232001 	eor	r2, r3, #1
 c101130:	e59f301c 	ldr	r3, [pc, #28]	; c101154 <led1_switch+0x3c>
 c101134:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101138:	e59f3014 	ldr	r3, [pc, #20]	; c101154 <led1_switch+0x3c>
 c10113c:	e5933000 	ldr	r3, [r3]
 c101140:	e1a00003 	mov	r0, r3
 c101144:	eb000023 	bl	c1011d8 <leds_display>
}
 c101148:	e24bd00c 	sub	sp, fp, #12
 c10114c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101150:	e12fff1e 	bx	lr
 c101154:	0c1000d4 	.word	0x0c1000d4

0c101158 <led2_switch>:

void led2_switch( void )
{
 c101158:	e1a0c00d 	mov	ip, sp
 c10115c:	e92dd800 	push	{fp, ip, lr, pc}
 c101160:	e24cb004 	sub	fp, ip, #4
	status ^= LED2;
 c101164:	e59f3028 	ldr	r3, [pc, #40]	; c101194 <led2_switch+0x3c>
 c101168:	e5933000 	ldr	r3, [r3]
 c10116c:	e2232002 	eor	r2, r3, #2
 c101170:	e59f301c 	ldr	r3, [pc, #28]	; c101194 <led2_switch+0x3c>
 c101174:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101178:	e59f3014 	ldr	r3, [pc, #20]	; c101194 <led2_switch+0x3c>
 c10117c:	e5933000 	ldr	r3, [r3]
 c101180:	e1a00003 	mov	r0, r3
 c101184:	eb000013 	bl	c1011d8 <leds_display>
}
 c101188:	e24bd00c 	sub	sp, fp, #12
 c10118c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101190:	e12fff1e 	bx	lr
 c101194:	0c1000d4 	.word	0x0c1000d4

0c101198 <leds_switch>:

void leds_switch( void ){
 c101198:	e1a0c00d 	mov	ip, sp
 c10119c:	e92dd800 	push	{fp, ip, lr, pc}
 c1011a0:	e24cb004 	sub	fp, ip, #4
	status ^= (LED1 | LED2);
 c1011a4:	e59f3028 	ldr	r3, [pc, #40]	; c1011d4 <leds_switch+0x3c>
 c1011a8:	e5933000 	ldr	r3, [r3]
 c1011ac:	e2232003 	eor	r2, r3, #3
 c1011b0:	e59f301c 	ldr	r3, [pc, #28]	; c1011d4 <leds_switch+0x3c>
 c1011b4:	e5832000 	str	r2, [r3]
	leds_display( status );
 c1011b8:	e59f3014 	ldr	r3, [pc, #20]	; c1011d4 <leds_switch+0x3c>
 c1011bc:	e5933000 	ldr	r3, [r3]
 c1011c0:	e1a00003 	mov	r0, r3
 c1011c4:	eb000003 	bl	c1011d8 <leds_display>
}
 c1011c8:	e24bd00c 	sub	sp, fp, #12
 c1011cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011d0:	e12fff1e 	bx	lr
 c1011d4:	0c1000d4 	.word	0x0c1000d4

0c1011d8 <leds_display>:

void leds_display( unsigned int leds_status )
{
 c1011d8:	e1a0c00d 	mov	ip, sp
 c1011dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1011e0:	e24cb004 	sub	fp, ip, #4
 c1011e4:	e24dd008 	sub	sp, sp, #8
 c1011e8:	e50b0010 	str	r0, [fp, #-16]
	status = leds_status;
 c1011ec:	e59f3074 	ldr	r3, [pc, #116]	; c101268 <leds_display+0x90>
 c1011f0:	e51b2010 	ldr	r2, [fp, #-16]
 c1011f4:	e5832000 	str	r2, [r3]
	
	// LED 1
	if( status & LED1 )
 c1011f8:	e59f3068 	ldr	r3, [pc, #104]	; c101268 <leds_display+0x90>
 c1011fc:	e5933000 	ldr	r3, [r3]
 c101200:	e2033001 	and	r3, r3, #1
 c101204:	e20330ff 	and	r3, r3, #255	; 0xff
 c101208:	e3530000 	cmp	r3, #0
 c10120c:	0a000003 	beq	c101220 <leds_display+0x48>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 1
		portB_write(BIT_LED1,LOW);
 c101210:	e3a00009 	mov	r0, #9
 c101214:	e3a01000 	mov	r1, #0
 c101218:	ebfffc38 	bl	c100300 <portB_write>
 c10121c:	ea000002 	b	c10122c <leds_display+0x54>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 1
		portB_write(BIT_LED1,HIGH);
 c101220:	e3a00009 	mov	r0, #9
 c101224:	e3a01001 	mov	r1, #1
 c101228:	ebfffc34 	bl	c100300 <portB_write>

	// LED 2
	if( status & LED2 )
 c10122c:	e59f3034 	ldr	r3, [pc, #52]	; c101268 <leds_display+0x90>
 c101230:	e5933000 	ldr	r3, [r3]
 c101234:	e2033002 	and	r3, r3, #2
 c101238:	e3530000 	cmp	r3, #0
 c10123c:	0a000003 	beq	c101250 <leds_display+0x78>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 2
		portB_write(BIT_LED2,LOW);
 c101240:	e3a0000a 	mov	r0, #10
 c101244:	e3a01000 	mov	r1, #0
 c101248:	ebfffc2c 	bl	c100300 <portB_write>
 c10124c:	ea000002 	b	c10125c <leds_display+0x84>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 2
		portB_write(BIT_LED2,HIGH);
 c101250:	e3a0000a 	mov	r0, #10
 c101254:	e3a01001 	mov	r1, #1
 c101258:	ebfffc28 	bl	c100300 <portB_write>
}
 c10125c:	e24bd00c 	sub	sp, fp, #12
 c101260:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101264:	e12fff1e 	bx	lr
 c101268:	0c1000d4 	.word	0x0c1000d4

0c10126c <leds_ISR>:

int counter = 0;
int counter2 = 0;

void leds_ISR(void)
{
 c10126c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101270:	e1a0c00d 	mov	ip, sp
 c101274:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101278:	e24cb004 	sub	fp, ip, #4
	counter2++;
 c10127c:	e59f306c 	ldr	r3, [pc, #108]	; c1012f0 <leds_ISR+0x84>
 c101280:	e5933000 	ldr	r3, [r3]
 c101284:	e2832001 	add	r2, r3, #1
 c101288:	e59f3060 	ldr	r3, [pc, #96]	; c1012f0 <leds_ISR+0x84>
 c10128c:	e5832000 	str	r2, [r3]
	if (counter2 % 2 == 0){
 c101290:	e59f3058 	ldr	r3, [pc, #88]	; c1012f0 <leds_ISR+0x84>
 c101294:	e5933000 	ldr	r3, [r3]
 c101298:	e2033001 	and	r3, r3, #1
 c10129c:	e3530000 	cmp	r3, #0
 c1012a0:	1a000001 	bne	c1012ac <leds_ISR+0x40>
		led1_off();
 c1012a4:	ebffff6b 	bl	c101058 <led1_off>
		led2_off();
 c1012a8:	ebffff8a 	bl	c1010d8 <led2_off>
	}
	if (counter2 % 2 == 1){
 c1012ac:	e59f303c 	ldr	r3, [pc, #60]	; c1012f0 <leds_ISR+0x84>
 c1012b0:	e5932000 	ldr	r2, [r3]
 c1012b4:	e1a03fc2 	asr	r3, r2, #31
 c1012b8:	e1a03fa3 	lsr	r3, r3, #31
 c1012bc:	e0822003 	add	r2, r2, r3
 c1012c0:	e2022001 	and	r2, r2, #1
 c1012c4:	e0633002 	rsb	r3, r3, r2
 c1012c8:	e3530001 	cmp	r3, #1
 c1012cc:	1a000001 	bne	c1012d8 <leds_ISR+0x6c>
		led1_on();
 c1012d0:	ebffff50 	bl	c101018 <led1_on>
		led2_on();
 c1012d4:	ebffff6f 	bl	c101098 <led2_on>
	}
	ic_cleanflag(INT_TIMER2);
 c1012d8:	e3a0000b 	mov	r0, #11
 c1012dc:	ebfffea6 	bl	c100d7c <ic_cleanflag>
}
 c1012e0:	e24bd01c 	sub	sp, fp, #28
 c1012e4:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1012e8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1012ec:	e25ef004 	subs	pc, lr, #4
 c1012f0:	0c1000dc 	.word	0x0c1000dc

0c1012f4 <countdown_ISR>:

int countdown = 4;

void countdown_ISR(void){
 c1012f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012f8:	e1a0c00d 	mov	ip, sp
 c1012fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101300:	e24cb004 	sub	fp, ip, #4
	countdown--;
 c101304:	e59f3054 	ldr	r3, [pc, #84]	; c101360 <countdown_ISR+0x6c>
 c101308:	e5933000 	ldr	r3, [r3]
 c10130c:	e2432001 	sub	r2, r3, #1
 c101310:	e59f3048 	ldr	r3, [pc, #72]	; c101360 <countdown_ISR+0x6c>
 c101314:	e5832000 	str	r2, [r3]
	if (countdown == 0){
 c101318:	e59f3040 	ldr	r3, [pc, #64]	; c101360 <countdown_ISR+0x6c>
 c10131c:	e5933000 	ldr	r3, [r3]
 c101320:	e3530000 	cmp	r3, #0
 c101324:	1a000007 	bne	c101348 <countdown_ISR+0x54>
		tmr_stop(TIMER0);
 c101328:	e3a00000 	mov	r0, #0
 c10132c:	eb000283 	bl	c101d40 <tmr_stop>
		tmr_stop(TIMER2);
 c101330:	e3a00002 	mov	r0, #2
 c101334:	eb000281 	bl	c101d40 <tmr_stop>
		D8Led_digit(16);
 c101338:	e3a00010 	mov	r0, #16
 c10133c:	ebfffb88 	bl	c100164 <D8Led_digit>
		led1_on();
 c101340:	ebffff34 	bl	c101018 <led1_on>
		led2_on();
 c101344:	ebffff53 	bl	c101098 <led2_on>
	}
	ic_cleanflag(INT_TIMER4);
 c101348:	e3a00009 	mov	r0, #9
 c10134c:	ebfffe8a 	bl	c100d7c <ic_cleanflag>
}
 c101350:	e24bd01c 	sub	sp, fp, #28
 c101354:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101358:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10135c:	e25ef004 	subs	pc, lr, #4
 c101360:	0c10007c 	.word	0x0c10007c

0c101364 <timer_ISR>:

void timer_ISR(void)
{
 c101364:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101368:	e1a0c00d 	mov	ip, sp
 c10136c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101370:	e24cb004 	sub	fp, ip, #4
	// Depending on the Timer:
	// The moving segment must advance 1 position in the direction indicated in the RL structure.
	// The current position is given in the position field.
	// We only want to go through the external segments. So, position must be in the range 0-5.
		counter++;
 c101374:	e59f3048 	ldr	r3, [pc, #72]	; c1013c4 <timer_ISR+0x60>
 c101378:	e5933000 	ldr	r3, [r3]
 c10137c:	e2832001 	add	r2, r3, #1
 c101380:	e59f303c 	ldr	r3, [pc, #60]	; c1013c4 <timer_ISR+0x60>
 c101384:	e5832000 	str	r2, [r3]
		D8Led_digit(counter % 16);
 c101388:	e59f3034 	ldr	r3, [pc, #52]	; c1013c4 <timer_ISR+0x60>
 c10138c:	e5932000 	ldr	r2, [r3]
 c101390:	e1a03fc2 	asr	r3, r2, #31
 c101394:	e1a03e23 	lsr	r3, r3, #28
 c101398:	e0822003 	add	r2, r2, r3
 c10139c:	e202200f 	and	r2, r2, #15
 c1013a0:	e0633002 	rsb	r3, r3, r2
 c1013a4:	e1a00003 	mov	r0, r3
 c1013a8:	ebfffb6d 	bl	c100164 <D8Led_digit>

	// Clear interrupt flag in the interrupt controller
		ic_cleanflag(INT_TIMER0);
 c1013ac:	e3a0000d 	mov	r0, #13
 c1013b0:	ebfffe71 	bl	c100d7c <ic_cleanflag>
}
 c1013b4:	e24bd01c 	sub	sp, fp, #28
 c1013b8:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1013bc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1013c0:	e25ef004 	subs	pc, lr, #4
 c1013c4:	0c1000d8 	.word	0x0c1000d8

0c1013c8 <button_ISR>:

int button1Counter = 0;

void button_ISR(void)
{
 c1013c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1013cc:	e1a0c00d 	mov	ip, sp
 c1013d0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1013d4:	e24cb004 	sub	fp, ip, #4
 c1013d8:	e24dd008 	sub	sp, sp, #8
	unsigned int whicheint = rEXTINTPND;
 c1013dc:	e59f30c0 	ldr	r3, [pc, #192]	; c1014a4 <button_ISR+0xdc>
 c1013e0:	e5933000 	ldr	r3, [r3]
 c1013e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	unsigned int buttons = (whicheint >> 2) & 0x3;
 c1013e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1013ec:	e1a03123 	lsr	r3, r3, #2
 c1013f0:	e2033003 	and	r3, r3, #3
 c1013f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

	// Depending on the Buttons:
	if (buttons & BUT1) {
 c1013f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1013fc:	e2033001 	and	r3, r3, #1
 c101400:	e20330ff 	and	r3, r3, #255	; 0xff
 c101404:	e3530000 	cmp	r3, #0
 c101408:	0a000012 	beq	c101458 <button_ISR+0x90>
		button1Counter++;
 c10140c:	e59f3094 	ldr	r3, [pc, #148]	; c1014a8 <button_ISR+0xe0>
 c101410:	e5933000 	ldr	r3, [r3]
 c101414:	e2832001 	add	r2, r3, #1
 c101418:	e59f3088 	ldr	r3, [pc, #136]	; c1014a8 <button_ISR+0xe0>
 c10141c:	e5832000 	str	r2, [r3]
		if (button1Counter % 2 == 0){
 c101420:	e59f3080 	ldr	r3, [pc, #128]	; c1014a8 <button_ISR+0xe0>
 c101424:	e5933000 	ldr	r3, [r3]
 c101428:	e2033001 	and	r3, r3, #1
 c10142c:	e3530000 	cmp	r3, #0
 c101430:	1a000004 	bne	c101448 <button_ISR+0x80>
			tmr_stop(TIMER0);
 c101434:	e3a00000 	mov	r0, #0
 c101438:	eb000240 	bl	c101d40 <tmr_stop>
			tmr_stop(TIMER2);
 c10143c:	e3a00002 	mov	r0, #2
 c101440:	eb00023e 	bl	c101d40 <tmr_stop>
 c101444:	ea000003 	b	c101458 <button_ISR+0x90>
		}
		else{
			tmr_start(TIMER0);
 c101448:	e3a00000 	mov	r0, #0
 c10144c:	eb000219 	bl	c101cb8 <tmr_start>
			tmr_start(TIMER2);
 c101450:	e3a00002 	mov	r0, #2
 c101454:	eb000217 	bl	c101cb8 <tmr_start>
		}
	}
	if (buttons & BUT2) {
 c101458:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10145c:	e2033002 	and	r3, r3, #2
 c101460:	e3530000 	cmp	r3, #0
 c101464:	0a000001 	beq	c101470 <button_ISR+0xa8>
		// Use led functions defined in leds.h
		// Invert LED2
		// Invert movement state of the moving segment (moving field in RL structure)
		// (note that if we are restarting the movement the speed field must be copied to the iter field)
		tmr_start(TIMER4);
 c101468:	e3a00004 	mov	r0, #4
 c10146c:	eb000211 	bl	c101cb8 <tmr_start>
	}


	// eliminamos rebotes
	Delay(2000);
 c101470:	e3a00e7d 	mov	r0, #2000	; 0x7d0
 c101474:	eb000278 	bl	c101e5c <Delay>
	// Erase the corresponding flag in extintpnd
	rEXTINTPND |= (0x3 << 2); // Erase the interrupt requests in
 c101478:	e59f3024 	ldr	r3, [pc, #36]	; c1014a4 <button_ISR+0xdc>
 c10147c:	e59f2020 	ldr	r2, [pc, #32]	; c1014a4 <button_ISR+0xdc>
 c101480:	e5922000 	ldr	r2, [r2]
 c101484:	e382200c 	orr	r2, r2, #12
 c101488:	e5832000 	str	r2, [r3]
		         // EXTINTPND writing 1 in the corresponding flags
				 // (the ones corresponding to the buttons that were pressed)
	// COMPLETE: Clear the interrupt flag in the interrupt controller
	ic_cleanflag(21);
 c10148c:	e3a00015 	mov	r0, #21
 c101490:	ebfffe39 	bl	c100d7c <ic_cleanflag>
}
 c101494:	e24bd01c 	sub	sp, fp, #28
 c101498:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10149c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1014a0:	e25ef004 	subs	pc, lr, #4
 c1014a4:	01d20054 	.word	0x01d20054
 c1014a8:	0c1000e0 	.word	0x0c1000e0

0c1014ac <keyboard_ISR>:

void keyboard_ISR(void)
{
 c1014ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1014b0:	e1a0c00d 	mov	ip, sp
 c1014b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1014b8:	e24cb004 	sub	fp, ip, #4
 c1014bc:	e24dd008 	sub	sp, sp, #8
	int key;

	Delay(200);
 c1014c0:	e3a000c8 	mov	r0, #200	; 0xc8
 c1014c4:	eb000264 	bl	c101e5c <Delay>

	key = kb_scan();
 c1014c8:	ebfffe55 	bl	c100e24 <kb_scan>
 c1014cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

	if (key != -1 && button1Counter % 2 != 0) {
 c1014d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1014d4:	e3730001 	cmn	r3, #1
 c1014d8:	0a000017 	beq	c10153c <keyboard_ISR+0x90>
 c1014dc:	e59f3078 	ldr	r3, [pc, #120]	; c10155c <keyboard_ISR+0xb0>
 c1014e0:	e5933000 	ldr	r3, [r3]
 c1014e4:	e2033001 	and	r3, r3, #1
 c1014e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1014ec:	e3530000 	cmp	r3, #0
 c1014f0:	0a000011 	beq	c10153c <keyboard_ISR+0x90>
		// COMPLETE: Represent the key pressed in the D8Led display
		if (counter % 16 == key){
 c1014f4:	e59f3064 	ldr	r3, [pc, #100]	; c101560 <keyboard_ISR+0xb4>
 c1014f8:	e5932000 	ldr	r2, [r3]
 c1014fc:	e1a03fc2 	asr	r3, r2, #31
 c101500:	e1a03e23 	lsr	r3, r3, #28
 c101504:	e0822003 	add	r2, r2, r3
 c101508:	e202200f 	and	r2, r2, #15
 c10150c:	e0633002 	rsb	r3, r3, r2
 c101510:	e1a02003 	mov	r2, r3
 c101514:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101518:	e1520003 	cmp	r2, r3
 c10151c:	1a000002 	bne	c10152c <keyboard_ISR+0x80>
			D8Led_digit(10);
 c101520:	e3a0000a 	mov	r0, #10
 c101524:	ebfffb0e 	bl	c100164 <D8Led_digit>
 c101528:	ea000001 	b	c101534 <keyboard_ISR+0x88>
		}
		else{
			D8Led_digit(15);
 c10152c:	e3a0000f 	mov	r0, #15
 c101530:	ebfffb0b 	bl	c100164 <D8Led_digit>
		}

		while ((rPDATG & (0x1 >> 1)) == 0x2);
 c101534:	e59f3028 	ldr	r3, [pc, #40]	; c101564 <keyboard_ISR+0xb8>
 c101538:	e5933000 	ldr	r3, [r3]
	}

    Delay(200);
 c10153c:	e3a000c8 	mov	r0, #200	; 0xc8
 c101540:	eb000245 	bl	c101e5c <Delay>

	//COMPLETE: Clear the interrupt for line EINT1 in the interrupt controller (rI_ISPC)
    ic_cleanflag(INT_EINT1);
 c101544:	e3a00018 	mov	r0, #24
 c101548:	ebfffe0b 	bl	c100d7c <ic_cleanflag>
}
 c10154c:	e24bd01c 	sub	sp, fp, #28
 c101550:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101554:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101558:	e25ef004 	subs	pc, lr, #4
 c10155c:	0c1000e0 	.word	0x0c1000e0
 c101560:	0c1000d8 	.word	0x0c1000d8
 c101564:	01d20044 	.word	0x01d20044

0c101568 <setup>:

int setup(void)
{
 c101568:	e1a0c00d 	mov	ip, sp
 c10156c:	e92dd800 	push	{fp, ip, lr, pc}
 c101570:	e24cb004 	sub	fp, ip, #4
	leds_init();
 c101574:	ebfffe96 	bl	c100fd4 <leds_init>
	D8Led_init();
 c101578:	ebfffad9 	bl	c1000e4 <D8Led_init>
	D8Led_digit(0);
 c10157c:	e3a00000 	mov	r0, #0
 c101580:	ebfffaf7 	bl	c100164 <D8Led_digit>
	// Use the interface for the G Port defined at gpio.h
	// Configure pins 6 and 7 of Port G for generating external interrupts,
	// configure these interrupts as FALLING edge,
	// and activate the pull-up resistances.

	portG_conf(1, EINT);
 c101584:	e3a00001 	mov	r0, #1
 c101588:	e3a01003 	mov	r1, #3
 c10158c:	ebfffb8a 	bl	c1003bc <portG_conf>
	portG_conf(6, EINT);
 c101590:	e3a00006 	mov	r0, #6
 c101594:	e3a01003 	mov	r1, #3
 c101598:	ebfffb87 	bl	c1003bc <portG_conf>
	portG_conf(7, EINT);
 c10159c:	e3a00007 	mov	r0, #7
 c1015a0:	e3a01003 	mov	r1, #3
 c1015a4:	ebfffb84 	bl	c1003bc <portG_conf>

	portG_conf_pup(1, ENABLE);
 c1015a8:	e3a00001 	mov	r0, #1
 c1015ac:	e3a01001 	mov	r1, #1
 c1015b0:	ebfffcc1 	bl	c1008bc <portG_conf_pup>
	portG_conf_pup(6, ENABLE);
 c1015b4:	e3a00006 	mov	r0, #6
 c1015b8:	e3a01001 	mov	r1, #1
 c1015bc:	ebfffcbe 	bl	c1008bc <portG_conf_pup>
	portG_conf_pup(7, ENABLE);
 c1015c0:	e3a00007 	mov	r0, #7
 c1015c4:	e3a01001 	mov	r1, #1
 c1015c8:	ebfffcbb 	bl	c1008bc <portG_conf_pup>

	portG_eint_trig(1, FALLING);
 c1015cc:	e3a00001 	mov	r0, #1
 c1015d0:	e3a01002 	mov	r1, #2
 c1015d4:	ebfffbd2 	bl	c100524 <portG_eint_trig>
	portG_eint_trig(6, FALLING);
 c1015d8:	e3a00006 	mov	r0, #6
 c1015dc:	e3a01002 	mov	r1, #2
 c1015e0:	ebfffbcf 	bl	c100524 <portG_eint_trig>
	portG_eint_trig(7, FALLING);
 c1015e4:	e3a00007 	mov	r0, #7
 c1015e8:	e3a01002 	mov	r1, #2
 c1015ec:	ebfffbcc 	bl	c100524 <portG_eint_trig>

	/********************************************************************/

	/* Configuration of the timer */

	tmr_set_prescaler(0, 255);
 c1015f0:	e3a00000 	mov	r0, #0
 c1015f4:	e3a010ff 	mov	r1, #255	; 0xff
 c1015f8:	eb000083 	bl	c10180c <tmr_set_prescaler>
	tmr_set_divider(0, D1_8);
 c1015fc:	e3a00000 	mov	r0, #0
 c101600:	e3a01002 	mov	r1, #2
 c101604:	eb0000b1 	bl	c1018d0 <tmr_set_divider>
	tmr_set_count(TIMER0, 31250, 1); // put something other than 0 (check out) !!!!
 c101608:	e3a00000 	mov	r0, #0
 c10160c:	e59f1190 	ldr	r1, [pc, #400]	; c1017a4 <setup+0x23c>
 c101610:	e3a02001 	mov	r2, #1
 c101614:	eb0000f2 	bl	c1019e4 <tmr_set_count>
	tmr_set_mode(TIMER0, ONE_SHOT); // look it up
 c101618:	e3a00000 	mov	r0, #0
 c10161c:	e3a01000 	mov	r1, #0
 c101620:	eb000169 	bl	c101bcc <tmr_set_mode>
	tmr_update(TIMER0);
 c101624:	e3a00000 	mov	r0, #0
 c101628:	eb00013a 	bl	c101b18 <tmr_update>
	tmr_set_mode(TIMER0, RELOAD);
 c10162c:	e3a00000 	mov	r0, #0
 c101630:	e3a01001 	mov	r1, #1
 c101634:	eb000164 	bl	c101bcc <tmr_set_mode>

	tmr_set_prescaler(1, 255);
 c101638:	e3a00001 	mov	r0, #1
 c10163c:	e3a010ff 	mov	r1, #255	; 0xff
 c101640:	eb000071 	bl	c10180c <tmr_set_prescaler>
	tmr_set_divider(2, D1_8);
 c101644:	e3a00002 	mov	r0, #2
 c101648:	e3a01002 	mov	r1, #2
 c10164c:	eb00009f 	bl	c1018d0 <tmr_set_divider>
	tmr_set_count(TIMER2, 15625, 1); // put something other than 0 (check out) !!!!
 c101650:	e3a00002 	mov	r0, #2
 c101654:	e59f114c 	ldr	r1, [pc, #332]	; c1017a8 <setup+0x240>
 c101658:	e3a02001 	mov	r2, #1
 c10165c:	eb0000e0 	bl	c1019e4 <tmr_set_count>
	tmr_set_mode(TIMER2, ONE_SHOT); // look it up
 c101660:	e3a00002 	mov	r0, #2
 c101664:	e3a01000 	mov	r1, #0
 c101668:	eb000157 	bl	c101bcc <tmr_set_mode>
	tmr_update(TIMER2);
 c10166c:	e3a00002 	mov	r0, #2
 c101670:	eb000128 	bl	c101b18 <tmr_update>
	tmr_set_mode(TIMER2, RELOAD);
 c101674:	e3a00002 	mov	r0, #2
 c101678:	e3a01001 	mov	r1, #1
 c10167c:	eb000152 	bl	c101bcc <tmr_set_mode>

	tmr_set_prescaler(2, 255);
 c101680:	e3a00002 	mov	r0, #2
 c101684:	e3a010ff 	mov	r1, #255	; 0xff
 c101688:	eb00005f 	bl	c10180c <tmr_set_prescaler>
	tmr_set_divider(4, D1_8);
 c10168c:	e3a00004 	mov	r0, #4
 c101690:	e3a01002 	mov	r1, #2
 c101694:	eb00008d 	bl	c1018d0 <tmr_set_divider>
	tmr_set_count(TIMER4, 31250, 1); // put something other than 0 (check out) !!!!
 c101698:	e3a00004 	mov	r0, #4
 c10169c:	e59f1100 	ldr	r1, [pc, #256]	; c1017a4 <setup+0x23c>
 c1016a0:	e3a02001 	mov	r2, #1
 c1016a4:	eb0000ce 	bl	c1019e4 <tmr_set_count>
	tmr_set_mode(TIMER4, ONE_SHOT); // look it up
 c1016a8:	e3a00004 	mov	r0, #4
 c1016ac:	e3a01000 	mov	r1, #0
 c1016b0:	eb000145 	bl	c101bcc <tmr_set_mode>
	tmr_update(TIMER4);
 c1016b4:	e3a00004 	mov	r0, #4
 c1016b8:	eb000116 	bl	c101b18 <tmr_update>
	tmr_set_mode(TIMER4, RELOAD);
 c1016bc:	e3a00004 	mov	r0, #4
 c1016c0:	e3a01001 	mov	r1, #1
 c1016c4:	eb000140 	bl	c101bcc <tmr_set_mode>

	//if (RL.moving)
	/***************************/

	// Register the ISRs for the timer and the push buttons
	pISR_TIMER0 = (int) timer_ISR;
 c1016c8:	e59f30dc 	ldr	r3, [pc, #220]	; c1017ac <setup+0x244>
 c1016cc:	e59f20dc 	ldr	r2, [pc, #220]	; c1017b0 <setup+0x248>
 c1016d0:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (int) leds_ISR;
 c1016d4:	e59f30d8 	ldr	r3, [pc, #216]	; c1017b4 <setup+0x24c>
 c1016d8:	e59f20d8 	ldr	r2, [pc, #216]	; c1017b8 <setup+0x250>
 c1016dc:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (int) countdown_ISR;
 c1016e0:	e59f30d4 	ldr	r3, [pc, #212]	; c1017bc <setup+0x254>
 c1016e4:	e59f20d4 	ldr	r2, [pc, #212]	; c1017c0 <setup+0x258>
 c1016e8:	e5832000 	str	r2, [r3]
	pISR_EINT4567 = (int) button_ISR;
 c1016ec:	e59f30d0 	ldr	r3, [pc, #208]	; c1017c4 <setup+0x25c>
 c1016f0:	e59f20d0 	ldr	r2, [pc, #208]	; c1017c8 <setup+0x260>
 c1016f4:	e5832000 	str	r2, [r3]
	pISR_EINT1 = (int) keyboard_ISR;
 c1016f8:	e59f30cc 	ldr	r3, [pc, #204]	; c1017cc <setup+0x264>
 c1016fc:	e59f20cc 	ldr	r2, [pc, #204]	; c1017d0 <setup+0x268>
 c101700:	e5832000 	str	r2, [r3]

	ic_init();
 c101704:	ebfffcd2 	bl	c100a54 <ic_init>
	//	Configure line INT_EINT4567 in IRQ mode
	//	Configure line INT_EINT1 in IRQ mode
	//	Enable line INT_TIMER0
	//	Enable line INT_EINT4567
	//	Enable line INT_EINT1
	ic_conf_irq(ENABLE, VEC);
 c101708:	e3a00001 	mov	r0, #1
 c10170c:	e3a01000 	mov	r1, #0
 c101710:	ebfffce0 	bl	c100a98 <ic_conf_irq>
	ic_conf_fiq(DISABLE);
 c101714:	e3a00000 	mov	r0, #0
 c101718:	ebfffd0d 	bl	c100b54 <ic_conf_fiq>
	ic_conf_line(INT_TIMER0, IRQ);
 c10171c:	e3a0000d 	mov	r0, #13
 c101720:	e3a01000 	mov	r1, #0
 c101724:	ebfffd2c 	bl	c100bdc <ic_conf_line>
	ic_conf_line(INT_TIMER2, IRQ);
 c101728:	e3a0000b 	mov	r0, #11
 c10172c:	e3a01000 	mov	r1, #0
 c101730:	ebfffd29 	bl	c100bdc <ic_conf_line>
	ic_conf_line(INT_TIMER4, IRQ);
 c101734:	e3a00009 	mov	r0, #9
 c101738:	e3a01000 	mov	r1, #0
 c10173c:	ebfffd26 	bl	c100bdc <ic_conf_line>
	ic_conf_line(INT_EINT4567, IRQ);
 c101740:	e3a00015 	mov	r0, #21
 c101744:	e3a01000 	mov	r1, #0
 c101748:	ebfffd23 	bl	c100bdc <ic_conf_line>
	ic_conf_line(INT_EINT1, IRQ);
 c10174c:	e3a00018 	mov	r0, #24
 c101750:	e3a01000 	mov	r1, #0
 c101754:	ebfffd20 	bl	c100bdc <ic_conf_line>
	ic_enable(INT_TIMER0);
 c101758:	e3a0000d 	mov	r0, #13
 c10175c:	ebfffd4e 	bl	c100c9c <ic_enable>
	ic_enable(INT_TIMER2);
 c101760:	e3a0000b 	mov	r0, #11
 c101764:	ebfffd4c 	bl	c100c9c <ic_enable>
	ic_enable(INT_TIMER4);
 c101768:	e3a00009 	mov	r0, #9
 c10176c:	ebfffd4a 	bl	c100c9c <ic_enable>
	ic_enable(INT_EINT4567);
 c101770:	e3a00015 	mov	r0, #21
 c101774:	ebfffd48 	bl	c100c9c <ic_enable>
	ic_enable(INT_EINT1);
 c101778:	e3a00018 	mov	r0, #24
 c10177c:	ebfffd46 	bl	c100c9c <ic_enable>

	tmr_stop(TIMER0);
 c101780:	e3a00000 	mov	r0, #0
 c101784:	eb00016d 	bl	c101d40 <tmr_stop>
	//tmr_stop(TIMER2);
	/***************************************************/

	// Callibrate the delay function
	Delay(0);
 c101788:	e3a00000 	mov	r0, #0
 c10178c:	eb0001b2 	bl	c101e5c <Delay>
	return 0;
 c101790:	e3a03000 	mov	r3, #0
}
 c101794:	e1a00003 	mov	r0, r3
 c101798:	e24bd00c 	sub	sp, fp, #12
 c10179c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017a0:	e12fff1e 	bx	lr
 c1017a4:	00007a12 	.word	0x00007a12
 c1017a8:	00003d09 	.word	0x00003d09
 c1017ac:	0c7fff54 	.word	0x0c7fff54
 c1017b0:	0c101364 	.word	0x0c101364
 c1017b4:	0c7fff4c 	.word	0x0c7fff4c
 c1017b8:	0c10126c 	.word	0x0c10126c
 c1017bc:	0c7fff44 	.word	0x0c7fff44
 c1017c0:	0c1012f4 	.word	0x0c1012f4
 c1017c4:	0c7fff74 	.word	0x0c7fff74
 c1017c8:	0c1013c8 	.word	0x0c1013c8
 c1017cc:	0c7fff80 	.word	0x0c7fff80
 c1017d0:	0c1014ac 	.word	0x0c1014ac

0c1017d4 <loop>:

int loop(void)
{
 c1017d4:	e1a0c00d 	mov	ip, sp
 c1017d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1017dc:	e24cb004 	sub	fp, ip, #4
	return 0;
 c1017e0:	e3a03000 	mov	r3, #0
}
 c1017e4:	e1a00003 	mov	r0, r3
 c1017e8:	e24bd00c 	sub	sp, fp, #12
 c1017ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017f0:	e12fff1e 	bx	lr

0c1017f4 <main>:


int main(void)
{
 c1017f4:	e1a0c00d 	mov	ip, sp
 c1017f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1017fc:	e24cb004 	sub	fp, ip, #4
	setup();
 c101800:	ebffff58 	bl	c101568 <setup>

	while (1) {
		loop();
 c101804:	ebfffff2 	bl	c1017d4 <loop>
	}
 c101808:	eafffffd 	b	c101804 <main+0x10>

0c10180c <tmr_set_prescaler>:
#include "44b.h"
#include "timer.h"

int tmr_set_prescaler(int p, int  value)
{
 c10180c:	e1a0c00d 	mov	ip, sp
 c101810:	e92dd800 	push	{fp, ip, lr, pc}
 c101814:	e24cb004 	sub	fp, ip, #4
 c101818:	e24dd010 	sub	sp, sp, #16
 c10181c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101820:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	int offset = p*8;
 c101824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101828:	e1a03183 	lsl	r3, r3, #3
 c10182c:	e50b3010 	str	r3, [fp, #-16]
	value &= 0xFF;
 c101830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101834:	e20330ff 	and	r3, r3, #255	; 0xff
 c101838:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	if (p < 0 | p > 3)
 c10183c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101840:	e1a03fa3 	lsr	r3, r3, #31
 c101844:	e20320ff 	and	r2, r3, #255	; 0xff
 c101848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10184c:	e3530003 	cmp	r3, #3
 c101850:	d3a03000 	movle	r3, #0
 c101854:	c3a03001 	movgt	r3, #1
 c101858:	e20330ff 	and	r3, r3, #255	; 0xff
 c10185c:	e1823003 	orr	r3, r2, r3
 c101860:	e20330ff 	and	r3, r3, #255	; 0xff
 c101864:	e3530000 	cmp	r3, #0
 c101868:	0a000001 	beq	c101874 <tmr_set_prescaler+0x68>
		return -1;
 c10186c:	e3e03000 	mvn	r3, #0
 c101870:	ea000011 	b	c1018bc <tmr_set_prescaler+0xb0>

	// Write in register rTCFG0 the value "value" from position "offset" on
	// for establishing the pre-scaling value
	rTCFG0 &= ~(0XFF << offset);
 c101874:	e59f3050 	ldr	r3, [pc, #80]	; c1018cc <tmr_set_prescaler+0xc0>
 c101878:	e59f204c 	ldr	r2, [pc, #76]	; c1018cc <tmr_set_prescaler+0xc0>
 c10187c:	e5921000 	ldr	r1, [r2]
 c101880:	e3a000ff 	mov	r0, #255	; 0xff
 c101884:	e51b2010 	ldr	r2, [fp, #-16]
 c101888:	e1a02210 	lsl	r2, r0, r2
 c10188c:	e1e02002 	mvn	r2, r2
 c101890:	e0012002 	and	r2, r1, r2
 c101894:	e5832000 	str	r2, [r3]
	rTCFG0 |= (value << offset);
 c101898:	e59f302c 	ldr	r3, [pc, #44]	; c1018cc <tmr_set_prescaler+0xc0>
 c10189c:	e59f2028 	ldr	r2, [pc, #40]	; c1018cc <tmr_set_prescaler+0xc0>
 c1018a0:	e5921000 	ldr	r1, [r2]
 c1018a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c1018a8:	e51b2010 	ldr	r2, [fp, #-16]
 c1018ac:	e1a02210 	lsl	r2, r0, r2
 c1018b0:	e1812002 	orr	r2, r1, r2
 c1018b4:	e5832000 	str	r2, [r3]
	return 0;
 c1018b8:	e3a03000 	mov	r3, #0
}
 c1018bc:	e1a00003 	mov	r0, r3
 c1018c0:	e24bd00c 	sub	sp, fp, #12
 c1018c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1018c8:	e12fff1e 	bx	lr
 c1018cc:	01d50000 	.word	0x01d50000

0c1018d0 <tmr_set_divider>:

int tmr_set_divider(int d, enum tmr_div div)
{
 c1018d0:	e1a0c00d 	mov	ip, sp
 c1018d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1018d8:	e24cb004 	sub	fp, ip, #4
 c1018dc:	e24dd010 	sub	sp, sp, #16
 c1018e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1018e4:	e1a03001 	mov	r3, r1
 c1018e8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int ret = 0;
 c1018ec:	e3a03000 	mov	r3, #0
 c1018f0:	e50b3010 	str	r3, [fp, #-16]
	int pos = d*4;
 c1018f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1018f8:	e1a03103 	lsl	r3, r3, #2
 c1018fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if ((d < 0 || d > 5) ||
 c101900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101904:	e3530000 	cmp	r3, #0
 c101908:	ba000014 	blt	c101960 <tmr_set_divider+0x90>
 c10190c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101910:	e3530005 	cmp	r3, #5
 c101914:	ca000011 	bgt	c101960 <tmr_set_divider+0x90>
 c101918:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10191c:	e3530004 	cmp	r3, #4
 c101920:	1a000002 	bne	c101930 <tmr_set_divider+0x60>
			(div == D1_32 && d > 3) ||
 c101924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101928:	e3530003 	cmp	r3, #3
 c10192c:	ca00000b 	bgt	c101960 <tmr_set_divider+0x90>
 c101930:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101934:	e3530005 	cmp	r3, #5
 c101938:	1a000002 	bne	c101948 <tmr_set_divider+0x78>
			(div == EXTCLK && d != 5) ||
 c10193c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101940:	e3530005 	cmp	r3, #5
 c101944:	1a000005 	bne	c101960 <tmr_set_divider+0x90>
 c101948:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10194c:	e3530006 	cmp	r3, #6
 c101950:	1a000004 	bne	c101968 <tmr_set_divider+0x98>
			(div == TCLK && d != 4))
 c101954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101958:	e3530004 	cmp	r3, #4
 c10195c:	0a000001 	beq	c101968 <tmr_set_divider+0x98>
		return -1;
 c101960:	e3e03000 	mvn	r3, #0
 c101964:	ea000019 	b	c1019d0 <tmr_set_divider+0x100>

	if (div == EXTCLK || div == TCLK)
 c101968:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10196c:	e3530005 	cmp	r3, #5
 c101970:	0a000002 	beq	c101980 <tmr_set_divider+0xb0>
 c101974:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101978:	e3530006 	cmp	r3, #6
 c10197c:	1a000001 	bne	c101988 <tmr_set_divider+0xb8>
		div = 4;
 c101980:	e3a03004 	mov	r3, #4
 c101984:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

	// Write in register rTCFG1 the value "div" from position "pos" on
	// for establishing the division factor
	rTCFG1 &= ~(0XF << pos);
 c101988:	e59f3050 	ldr	r3, [pc, #80]	; c1019e0 <tmr_set_divider+0x110>
 c10198c:	e59f204c 	ldr	r2, [pc, #76]	; c1019e0 <tmr_set_divider+0x110>
 c101990:	e5921000 	ldr	r1, [r2]
 c101994:	e3a0000f 	mov	r0, #15
 c101998:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10199c:	e1a02210 	lsl	r2, r0, r2
 c1019a0:	e1e02002 	mvn	r2, r2
 c1019a4:	e0012002 	and	r2, r1, r2
 c1019a8:	e5832000 	str	r2, [r3]
	rTCFG1 |= (div << pos);
 c1019ac:	e59f302c 	ldr	r3, [pc, #44]	; c1019e0 <tmr_set_divider+0x110>
 c1019b0:	e59f2028 	ldr	r2, [pc, #40]	; c1019e0 <tmr_set_divider+0x110>
 c1019b4:	e5921000 	ldr	r1, [r2]
 c1019b8:	e55b0019 	ldrb	r0, [fp, #-25]	; 0xffffffe7
 c1019bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1019c0:	e1a02210 	lsl	r2, r0, r2
 c1019c4:	e1812002 	orr	r2, r1, r2
 c1019c8:	e5832000 	str	r2, [r3]

	return 0;
 c1019cc:	e3a03000 	mov	r3, #0
}
 c1019d0:	e1a00003 	mov	r0, r3
 c1019d4:	e24bd00c 	sub	sp, fp, #12
 c1019d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1019dc:	e12fff1e 	bx	lr
 c1019e0:	01d50004 	.word	0x01d50004

0c1019e4 <tmr_set_count>:

int tmr_set_count(enum tmr_timer t, int count, int cmp)
{
 c1019e4:	e1a0c00d 	mov	ip, sp
 c1019e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1019ec:	e24cb004 	sub	fp, ip, #4
 c1019f0:	e24dd018 	sub	sp, sp, #24
 c1019f4:	e1a03000 	mov	r3, r0
 c1019f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1019fc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c101a00:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int err = 0;
 c101a04:	e3a03000 	mov	r3, #0
 c101a08:	e50b3010 	str	r3, [fp, #-16]
	switch (t) {
 c101a0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101a10:	e3530005 	cmp	r3, #5
 c101a14:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c101a18:	ea00002c 	b	c101ad0 <tmr_set_count+0xec>
 c101a1c:	0c101a34 	.word	0x0c101a34
 c101a20:	0c101a50 	.word	0x0c101a50
 c101a24:	0c101a6c 	.word	0x0c101a6c
 c101a28:	0c101a88 	.word	0x0c101a88
 c101a2c:	0c101aa4 	.word	0x0c101aa4
 c101a30:	0c101ac0 	.word	0x0c101ac0
		case TIMER0:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB0 and rTCMPB0
			rTCNTB0 = count;
 c101a34:	e59f30b0 	ldr	r3, [pc, #176]	; c101aec <tmr_set_count+0x108>
 c101a38:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101a3c:	e5832000 	str	r2, [r3]
			rTCMPB0 = cmp;
 c101a40:	e59f30a8 	ldr	r3, [pc, #168]	; c101af0 <tmr_set_count+0x10c>
 c101a44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101a48:	e5832000 	str	r2, [r3]
			 break;
 c101a4c:	ea000021 	b	c101ad8 <tmr_set_count+0xf4>
		case TIMER1:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB1 and rTCMPB1
			rTCNTB1 = count;
 c101a50:	e59f309c 	ldr	r3, [pc, #156]	; c101af4 <tmr_set_count+0x110>
 c101a54:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101a58:	e5832000 	str	r2, [r3]
			rTCMPB1 = cmp;
 c101a5c:	e59f3094 	ldr	r3, [pc, #148]	; c101af8 <tmr_set_count+0x114>
 c101a60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101a64:	e5832000 	str	r2, [r3]
			 break;
 c101a68:	ea00001a 	b	c101ad8 <tmr_set_count+0xf4>
		case TIMER2:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB2 and rTCMPB2
			rTCNTB2 = count;
 c101a6c:	e59f3088 	ldr	r3, [pc, #136]	; c101afc <tmr_set_count+0x118>
 c101a70:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101a74:	e5832000 	str	r2, [r3]
			rTCMPB2 = cmp;
 c101a78:	e59f3080 	ldr	r3, [pc, #128]	; c101b00 <tmr_set_count+0x11c>
 c101a7c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101a80:	e5832000 	str	r2, [r3]
			 break;
 c101a84:	ea000013 	b	c101ad8 <tmr_set_count+0xf4>
		case TIMER3:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB3 and rTCMPB3
			rTCNTB3 = count;
 c101a88:	e59f3074 	ldr	r3, [pc, #116]	; c101b04 <tmr_set_count+0x120>
 c101a8c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101a90:	e5832000 	str	r2, [r3]
			rTCMPB3 = cmp;
 c101a94:	e59f306c 	ldr	r3, [pc, #108]	; c101b08 <tmr_set_count+0x124>
 c101a98:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101a9c:	e5832000 	str	r2, [r3]
			 break;
 c101aa0:	ea00000c 	b	c101ad8 <tmr_set_count+0xf4>
		case TIMER4:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB4 and rTCMPB4
			rTCNTB4 = count;
 c101aa4:	e59f3060 	ldr	r3, [pc, #96]	; c101b0c <tmr_set_count+0x128>
 c101aa8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101aac:	e5832000 	str	r2, [r3]
			rTCMPB4 = cmp;
 c101ab0:	e59f3058 	ldr	r3, [pc, #88]	; c101b10 <tmr_set_count+0x12c>
 c101ab4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101ab8:	e5832000 	str	r2, [r3]
			 break;
 c101abc:	ea000005 	b	c101ad8 <tmr_set_count+0xf4>
		case TIMER5:
			// Establish the value for count to "count" and the value
			// for comparison "cmp" in registers rTCNTB5 and rTCMPB5
			rTCNTB5 = count;
 c101ac0:	e59f304c 	ldr	r3, [pc, #76]	; c101b14 <tmr_set_count+0x130>
 c101ac4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101ac8:	e5832000 	str	r2, [r3]
			 break;
 c101acc:	ea000001 	b	c101ad8 <tmr_set_count+0xf4>
		default:
			err = -1;
 c101ad0:	e3e03000 	mvn	r3, #0
 c101ad4:	e50b3010 	str	r3, [fp, #-16]
	}

	return err;
 c101ad8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c101adc:	e1a00003 	mov	r0, r3
 c101ae0:	e24bd00c 	sub	sp, fp, #12
 c101ae4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ae8:	e12fff1e 	bx	lr
 c101aec:	01d5000c 	.word	0x01d5000c
 c101af0:	01d50010 	.word	0x01d50010
 c101af4:	01d50018 	.word	0x01d50018
 c101af8:	01d5001c 	.word	0x01d5001c
 c101afc:	01d50024 	.word	0x01d50024
 c101b00:	01d50028 	.word	0x01d50028
 c101b04:	01d50030 	.word	0x01d50030
 c101b08:	01d50034 	.word	0x01d50034
 c101b0c:	01d5003c 	.word	0x01d5003c
 c101b10:	01d50040 	.word	0x01d50040
 c101b14:	01d50048 	.word	0x01d50048

0c101b18 <tmr_update>:

int tmr_update(enum tmr_timer t)
{
 c101b18:	e1a0c00d 	mov	ip, sp
 c101b1c:	e92dd800 	push	{fp, ip, lr, pc}
 c101b20:	e24cb004 	sub	fp, ip, #4
 c101b24:	e24dd010 	sub	sp, sp, #16
 c101b28:	e1a03000 	mov	r3, r0
 c101b2c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c101b30:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101b34:	e1a03103 	lsl	r3, r3, #2
 c101b38:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c101b3c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101b40:	e3530000 	cmp	r3, #0
 c101b44:	0a000002 	beq	c101b54 <tmr_update+0x3c>
		pos += 4;
 c101b48:	e51b3010 	ldr	r3, [fp, #-16]
 c101b4c:	e2833004 	add	r3, r3, #4
 c101b50:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c101b54:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101b58:	e3530005 	cmp	r3, #5
 c101b5c:	9a000001 	bls	c101b68 <tmr_update+0x50>
		return -1;
 c101b60:	e3e03000 	mvn	r3, #0
 c101b64:	ea000013 	b	c101bb8 <tmr_update+0xa0>

	// Set to 1 the bit "pos" of register rTCON and after that set it to 0
	rTCON |= (0x1 << (pos + 1));
 c101b68:	e59f3058 	ldr	r3, [pc, #88]	; c101bc8 <tmr_update+0xb0>
 c101b6c:	e59f2054 	ldr	r2, [pc, #84]	; c101bc8 <tmr_update+0xb0>
 c101b70:	e5921000 	ldr	r1, [r2]
 c101b74:	e51b2010 	ldr	r2, [fp, #-16]
 c101b78:	e2822001 	add	r2, r2, #1
 c101b7c:	e3a00001 	mov	r0, #1
 c101b80:	e1a02210 	lsl	r2, r0, r2
 c101b84:	e1812002 	orr	r2, r1, r2
 c101b88:	e5832000 	str	r2, [r3]
	rTCON &= ~(0X1 << (pos + 1));
 c101b8c:	e59f3034 	ldr	r3, [pc, #52]	; c101bc8 <tmr_update+0xb0>
 c101b90:	e59f2030 	ldr	r2, [pc, #48]	; c101bc8 <tmr_update+0xb0>
 c101b94:	e5921000 	ldr	r1, [r2]
 c101b98:	e51b2010 	ldr	r2, [fp, #-16]
 c101b9c:	e2822001 	add	r2, r2, #1
 c101ba0:	e3a00001 	mov	r0, #1
 c101ba4:	e1a02210 	lsl	r2, r0, r2
 c101ba8:	e1e02002 	mvn	r2, r2
 c101bac:	e0012002 	and	r2, r1, r2
 c101bb0:	e5832000 	str	r2, [r3]
	return 0;
 c101bb4:	e3a03000 	mov	r3, #0
}
 c101bb8:	e1a00003 	mov	r0, r3
 c101bbc:	e24bd00c 	sub	sp, fp, #12
 c101bc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101bc4:	e12fff1e 	bx	lr
 c101bc8:	01d50008 	.word	0x01d50008

0c101bcc <tmr_set_mode>:

int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
{
 c101bcc:	e1a0c00d 	mov	ip, sp
 c101bd0:	e92dd800 	push	{fp, ip, lr, pc}
 c101bd4:	e24cb004 	sub	fp, ip, #4
 c101bd8:	e24dd010 	sub	sp, sp, #16
 c101bdc:	e1a02000 	mov	r2, r0
 c101be0:	e1a03001 	mov	r3, r1
 c101be4:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c101be8:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int err = 0;
 c101bec:	e3a03000 	mov	r3, #0
 c101bf0:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c101bf4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101bf8:	e1a03103 	lsl	r3, r3, #2
 c101bfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c101c00:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101c04:	e3530000 	cmp	r3, #0
 c101c08:	0a000002 	beq	c101c18 <tmr_set_mode+0x4c>
		pos += 4;
 c101c0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101c10:	e2833004 	add	r3, r3, #4
 c101c14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if (t < 0 || t > 5)
 c101c18:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101c1c:	e3530005 	cmp	r3, #5
 c101c20:	9a000001 	bls	c101c2c <tmr_set_mode+0x60>
		return -1;
 c101c24:	e3e03000 	mvn	r3, #0
 c101c28:	ea00001d 	b	c101ca4 <tmr_set_mode+0xd8>

	if (mode == ONE_SHOT)
 c101c2c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c101c30:	e3530000 	cmp	r3, #0
 c101c34:	1a00000a 	bne	c101c64 <tmr_set_mode+0x98>
		// Set to 0 bit autoreload from position pos
		rTCON &= ~(0X1 << (pos + 3));
 c101c38:	e59f3074 	ldr	r3, [pc, #116]	; c101cb4 <tmr_set_mode+0xe8>
 c101c3c:	e59f2070 	ldr	r2, [pc, #112]	; c101cb4 <tmr_set_mode+0xe8>
 c101c40:	e5921000 	ldr	r1, [r2]
 c101c44:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101c48:	e2822003 	add	r2, r2, #3
 c101c4c:	e3a00001 	mov	r0, #1
 c101c50:	e1a02210 	lsl	r2, r0, r2
 c101c54:	e1e02002 	mvn	r2, r2
 c101c58:	e0012002 	and	r2, r1, r2
 c101c5c:	e5832000 	str	r2, [r3]
 c101c60:	ea00000e 	b	c101ca0 <tmr_set_mode+0xd4>
	else if (mode == RELOAD)
 c101c64:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c101c68:	e3530001 	cmp	r3, #1
 c101c6c:	1a000009 	bne	c101c98 <tmr_set_mode+0xcc>
		// Set to 1 bit autoreload from position pos
		rTCON |= (0X1 << (pos + 3));
 c101c70:	e59f303c 	ldr	r3, [pc, #60]	; c101cb4 <tmr_set_mode+0xe8>
 c101c74:	e59f2038 	ldr	r2, [pc, #56]	; c101cb4 <tmr_set_mode+0xe8>
 c101c78:	e5921000 	ldr	r1, [r2]
 c101c7c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101c80:	e2822003 	add	r2, r2, #3
 c101c84:	e3a00001 	mov	r0, #1
 c101c88:	e1a02210 	lsl	r2, r0, r2
 c101c8c:	e1812002 	orr	r2, r1, r2
 c101c90:	e5832000 	str	r2, [r3]
 c101c94:	ea000001 	b	c101ca0 <tmr_set_mode+0xd4>
	else
		err = -1;
 c101c98:	e3e03000 	mvn	r3, #0
 c101c9c:	e50b3010 	str	r3, [fp, #-16]

	return err;
 c101ca0:	e51b3010 	ldr	r3, [fp, #-16]
}
 c101ca4:	e1a00003 	mov	r0, r3
 c101ca8:	e24bd00c 	sub	sp, fp, #12
 c101cac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101cb0:	e12fff1e 	bx	lr
 c101cb4:	01d50008 	.word	0x01d50008

0c101cb8 <tmr_start>:

int tmr_start(enum tmr_timer t)
{
 c101cb8:	e1a0c00d 	mov	ip, sp
 c101cbc:	e92dd800 	push	{fp, ip, lr, pc}
 c101cc0:	e24cb004 	sub	fp, ip, #4
 c101cc4:	e24dd010 	sub	sp, sp, #16
 c101cc8:	e1a03000 	mov	r3, r0
 c101ccc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c101cd0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101cd4:	e1a03103 	lsl	r3, r3, #2
 c101cd8:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c101cdc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101ce0:	e3530000 	cmp	r3, #0
 c101ce4:	0a000002 	beq	c101cf4 <tmr_start+0x3c>
		pos += 4;
 c101ce8:	e51b3010 	ldr	r3, [fp, #-16]
 c101cec:	e2833004 	add	r3, r3, #4
 c101cf0:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c101cf4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101cf8:	e3530005 	cmp	r3, #5
 c101cfc:	9a000001 	bls	c101d08 <tmr_start+0x50>
		return -1;
 c101d00:	e3e03000 	mvn	r3, #0
 c101d04:	ea000008 	b	c101d2c <tmr_start+0x74>

	// Set to 1 bit of start from position pos in register rTCON
	rTCON |= (0x1 << pos);
 c101d08:	e59f302c 	ldr	r3, [pc, #44]	; c101d3c <tmr_start+0x84>
 c101d0c:	e59f2028 	ldr	r2, [pc, #40]	; c101d3c <tmr_start+0x84>
 c101d10:	e5921000 	ldr	r1, [r2]
 c101d14:	e3a00001 	mov	r0, #1
 c101d18:	e51b2010 	ldr	r2, [fp, #-16]
 c101d1c:	e1a02210 	lsl	r2, r0, r2
 c101d20:	e1812002 	orr	r2, r1, r2
 c101d24:	e5832000 	str	r2, [r3]

	return 0;
 c101d28:	e3a03000 	mov	r3, #0
}
 c101d2c:	e1a00003 	mov	r0, r3
 c101d30:	e24bd00c 	sub	sp, fp, #12
 c101d34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101d38:	e12fff1e 	bx	lr
 c101d3c:	01d50008 	.word	0x01d50008

0c101d40 <tmr_stop>:

int tmr_stop(enum tmr_timer t)
{
 c101d40:	e1a0c00d 	mov	ip, sp
 c101d44:	e92dd800 	push	{fp, ip, lr, pc}
 c101d48:	e24cb004 	sub	fp, ip, #4
 c101d4c:	e24dd010 	sub	sp, sp, #16
 c101d50:	e1a03000 	mov	r3, r0
 c101d54:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c101d58:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101d5c:	e1a03103 	lsl	r3, r3, #2
 c101d60:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c101d64:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101d68:	e3530000 	cmp	r3, #0
 c101d6c:	0a000002 	beq	c101d7c <tmr_stop+0x3c>
		pos += 4;
 c101d70:	e51b3010 	ldr	r3, [fp, #-16]
 c101d74:	e2833004 	add	r3, r3, #4
 c101d78:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c101d7c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101d80:	e3530005 	cmp	r3, #5
 c101d84:	9a000001 	bls	c101d90 <tmr_stop+0x50>
		return -1;
 c101d88:	e3e03000 	mvn	r3, #0
 c101d8c:	ea000009 	b	c101db8 <tmr_stop+0x78>

	// Set to 0 bit of start from position pos in register rTCON
	rTCON &= ~(0x1 << pos);
 c101d90:	e59f3030 	ldr	r3, [pc, #48]	; c101dc8 <tmr_stop+0x88>
 c101d94:	e59f202c 	ldr	r2, [pc, #44]	; c101dc8 <tmr_stop+0x88>
 c101d98:	e5921000 	ldr	r1, [r2]
 c101d9c:	e3a00001 	mov	r0, #1
 c101da0:	e51b2010 	ldr	r2, [fp, #-16]
 c101da4:	e1a02210 	lsl	r2, r0, r2
 c101da8:	e1e02002 	mvn	r2, r2
 c101dac:	e0012002 	and	r2, r1, r2
 c101db0:	e5832000 	str	r2, [r3]

	return 0;
 c101db4:	e3a03000 	mov	r3, #0
}
 c101db8:	e1a00003 	mov	r0, r3
 c101dbc:	e24bd00c 	sub	sp, fp, #12
 c101dc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101dc4:	e12fff1e 	bx	lr
 c101dc8:	01d50008 	.word	0x01d50008

0c101dcc <tmr_isrunning>:

int tmr_isrunning(enum tmr_timer t)
{
 c101dcc:	e1a0c00d 	mov	ip, sp
 c101dd0:	e92dd800 	push	{fp, ip, lr, pc}
 c101dd4:	e24cb004 	sub	fp, ip, #4
 c101dd8:	e24dd010 	sub	sp, sp, #16
 c101ddc:	e1a03000 	mov	r3, r0
 c101de0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c101de4:	e3a03000 	mov	r3, #0
 c101de8:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c101dec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101df0:	e1a03103 	lsl	r3, r3, #2
 c101df4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c101df8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101dfc:	e3530000 	cmp	r3, #0
 c101e00:	0a000002 	beq	c101e10 <tmr_isrunning+0x44>
		pos += 4;
 c101e04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101e08:	e2833004 	add	r3, r3, #4
 c101e0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if ((t >= 0) && (t <= 5) 
 c101e10:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101e14:	e3530005 	cmp	r3, #5
 c101e18:	8a000009 	bhi	c101e44 <tmr_isrunning+0x78>
			&& (rTCON & (0x1 << pos)))
 c101e1c:	e59f3034 	ldr	r3, [pc, #52]	; c101e58 <tmr_isrunning+0x8c>
 c101e20:	e5932000 	ldr	r2, [r3]
 c101e24:	e3a01001 	mov	r1, #1
 c101e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101e2c:	e1a03311 	lsl	r3, r1, r3
 c101e30:	e0023003 	and	r3, r2, r3
 c101e34:	e3530000 	cmp	r3, #0
 c101e38:	0a000001 	beq	c101e44 <tmr_isrunning+0x78>
		ret = 1;
 c101e3c:	e3a03001 	mov	r3, #1
 c101e40:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c101e44:	e51b3010 	ldr	r3, [fp, #-16]
}
 c101e48:	e1a00003 	mov	r0, r3
 c101e4c:	e24bd00c 	sub	sp, fp, #12
 c101e50:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e54:	e12fff1e 	bx	lr
 c101e58:	01d50008 	.word	0x01d50008

0c101e5c <Delay>:

void Delay(int time)
// time=0: adjust the Delay function by WatchDog timer.//
// time>0: the number of loop time//
// 100us resolution.//
{
 c101e5c:	e1a0c00d 	mov	ip, sp
 c101e60:	e92dd800 	push	{fp, ip, lr, pc}
 c101e64:	e24cb004 	sub	fp, ip, #4
 c101e68:	e24dd010 	sub	sp, sp, #16
 c101e6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i,adjust=0;
 c101e70:	e3a03000 	mov	r3, #0
 c101e74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if(time==0)
 c101e78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101e7c:	e3530000 	cmp	r3, #0
 c101e80:	1a000021 	bne	c101f0c <Delay+0xb0>
	{
		time=200;
 c101e84:	e3a030c8 	mov	r3, #200	; 0xc8
 c101e88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		adjust=1;
 c101e8c:	e3a03001 	mov	r3, #1
 c101e90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		delayLoopCount=400;
 c101e94:	e59f30d8 	ldr	r3, [pc, #216]	; c101f74 <Delay+0x118>
 c101e98:	e3a02e19 	mov	r2, #400	; 0x190
 c101e9c:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
 c101ea0:	e59f30d0 	ldr	r3, [pc, #208]	; c101f78 <Delay+0x11c>
 c101ea4:	e59f20d0 	ldr	r2, [pc, #208]	; c101f7c <Delay+0x120>
 c101ea8:	e5832000 	str	r2, [r3]
		rWTDAT=0xffff;
 c101eac:	e59f30cc 	ldr	r3, [pc, #204]	; c101f80 <Delay+0x124>
 c101eb0:	e59f20cc 	ldr	r2, [pc, #204]	; c101f84 <Delay+0x128>
 c101eb4:	e5832000 	str	r2, [r3]
		rWTCNT=0xffff;
 c101eb8:	e59f30c8 	ldr	r3, [pc, #200]	; c101f88 <Delay+0x12c>
 c101ebc:	e59f20c0 	ldr	r2, [pc, #192]	; c101f84 <Delay+0x128>
 c101ec0:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
 c101ec4:	e59f30ac 	ldr	r3, [pc, #172]	; c101f78 <Delay+0x11c>
 c101ec8:	e59f20bc 	ldr	r2, [pc, #188]	; c101f8c <Delay+0x130>
 c101ecc:	e5832000 	str	r2, [r3]
	}
	for(;time>0;time--)
 c101ed0:	ea00000d 	b	c101f0c <Delay+0xb0>
		for(i=0;i<delayLoopCount;i++);
 c101ed4:	e3a03000 	mov	r3, #0
 c101ed8:	e50b3010 	str	r3, [fp, #-16]
 c101edc:	ea000002 	b	c101eec <Delay+0x90>
 c101ee0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ee4:	e2833001 	add	r3, r3, #1
 c101ee8:	e50b3010 	str	r3, [fp, #-16]
 c101eec:	e59f3080 	ldr	r3, [pc, #128]	; c101f74 <Delay+0x118>
 c101ef0:	e5933000 	ldr	r3, [r3]
 c101ef4:	e51b2010 	ldr	r2, [fp, #-16]
 c101ef8:	e1520003 	cmp	r2, r3
 c101efc:	bafffff7 	blt	c101ee0 <Delay+0x84>
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
		rWTDAT=0xffff;
		rWTCNT=0xffff;
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
	}
	for(;time>0;time--)
 c101f00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101f04:	e2433001 	sub	r3, r3, #1
 c101f08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101f10:	e3530000 	cmp	r3, #0
 c101f14:	caffffee 	bgt	c101ed4 <Delay+0x78>
		for(i=0;i<delayLoopCount;i++);
	if(adjust==1)
 c101f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101f1c:	e3530001 	cmp	r3, #1
 c101f20:	1a000010 	bne	c101f68 <Delay+0x10c>
	{
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);
 c101f24:	e59f304c 	ldr	r3, [pc, #76]	; c101f78 <Delay+0x11c>
 c101f28:	e59f204c 	ldr	r2, [pc, #76]	; c101f7c <Delay+0x120>
 c101f2c:	e5832000 	str	r2, [r3]
		i=0xffff-rWTCNT;   //  1count/16us?????????//
 c101f30:	e59f3050 	ldr	r3, [pc, #80]	; c101f88 <Delay+0x12c>
 c101f34:	e5933000 	ldr	r3, [r3]
 c101f38:	e2633cff 	rsb	r3, r3, #65280	; 0xff00
 c101f3c:	e28330ff 	add	r3, r3, #255	; 0xff
 c101f40:	e50b3010 	str	r3, [fp, #-16]
		delayLoopCount=8000000/(i*64);	//400*100/(i*64/200)   //
 c101f44:	e51b3010 	ldr	r3, [fp, #-16]
 c101f48:	e1a03303 	lsl	r3, r3, #6
 c101f4c:	e59f003c 	ldr	r0, [pc, #60]	; c101f90 <Delay+0x134>
 c101f50:	e1a01003 	mov	r1, r3
 c101f54:	eb00000e 	bl	c101f94 <__aeabi_idiv>
 c101f58:	e1a03000 	mov	r3, r0
 c101f5c:	e1a02003 	mov	r2, r3
 c101f60:	e59f300c 	ldr	r3, [pc, #12]	; c101f74 <Delay+0x118>
 c101f64:	e5832000 	str	r2, [r3]
	}
}
 c101f68:	e24bd00c 	sub	sp, fp, #12
 c101f6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101f70:	e12fff1e 	bx	lr
 c101f74:	0c100080 	.word	0x0c100080
 c101f78:	01d30000 	.word	0x01d30000
 c101f7c:	00003f10 	.word	0x00003f10
 c101f80:	01d30004 	.word	0x01d30004
 c101f84:	0000ffff 	.word	0x0000ffff
 c101f88:	01d30008 	.word	0x01d30008
 c101f8c:	00003f30 	.word	0x00003f30
 c101f90:	007a1200 	.word	0x007a1200

0c101f94 <__aeabi_idiv>:
 c101f94:	e3510000 	cmp	r1, #0
 c101f98:	0a000043 	beq	c1020ac <.divsi3_skip_div0_test+0x110>

0c101f9c <.divsi3_skip_div0_test>:
 c101f9c:	e020c001 	eor	ip, r0, r1
 c101fa0:	42611000 	rsbmi	r1, r1, #0
 c101fa4:	e2512001 	subs	r2, r1, #1
 c101fa8:	0a000027 	beq	c10204c <.divsi3_skip_div0_test+0xb0>
 c101fac:	e1b03000 	movs	r3, r0
 c101fb0:	42603000 	rsbmi	r3, r0, #0
 c101fb4:	e1530001 	cmp	r3, r1
 c101fb8:	9a000026 	bls	c102058 <.divsi3_skip_div0_test+0xbc>
 c101fbc:	e1110002 	tst	r1, r2
 c101fc0:	0a000028 	beq	c102068 <.divsi3_skip_div0_test+0xcc>
 c101fc4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c101fc8:	01a01181 	lsleq	r1, r1, #3
 c101fcc:	03a02008 	moveq	r2, #8
 c101fd0:	13a02001 	movne	r2, #1
 c101fd4:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c101fd8:	31510003 	cmpcc	r1, r3
 c101fdc:	31a01201 	lslcc	r1, r1, #4
 c101fe0:	31a02202 	lslcc	r2, r2, #4
 c101fe4:	3afffffa 	bcc	c101fd4 <.divsi3_skip_div0_test+0x38>
 c101fe8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c101fec:	31510003 	cmpcc	r1, r3
 c101ff0:	31a01081 	lslcc	r1, r1, #1
 c101ff4:	31a02082 	lslcc	r2, r2, #1
 c101ff8:	3afffffa 	bcc	c101fe8 <.divsi3_skip_div0_test+0x4c>
 c101ffc:	e3a00000 	mov	r0, #0
 c102000:	e1530001 	cmp	r3, r1
 c102004:	20433001 	subcs	r3, r3, r1
 c102008:	21800002 	orrcs	r0, r0, r2
 c10200c:	e15300a1 	cmp	r3, r1, lsr #1
 c102010:	204330a1 	subcs	r3, r3, r1, lsr #1
 c102014:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c102018:	e1530121 	cmp	r3, r1, lsr #2
 c10201c:	20433121 	subcs	r3, r3, r1, lsr #2
 c102020:	21800122 	orrcs	r0, r0, r2, lsr #2
 c102024:	e15301a1 	cmp	r3, r1, lsr #3
 c102028:	204331a1 	subcs	r3, r3, r1, lsr #3
 c10202c:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c102030:	e3530000 	cmp	r3, #0
 c102034:	11b02222 	lsrsne	r2, r2, #4
 c102038:	11a01221 	lsrne	r1, r1, #4
 c10203c:	1affffef 	bne	c102000 <.divsi3_skip_div0_test+0x64>
 c102040:	e35c0000 	cmp	ip, #0
 c102044:	42600000 	rsbmi	r0, r0, #0
 c102048:	e12fff1e 	bx	lr
 c10204c:	e13c0000 	teq	ip, r0
 c102050:	42600000 	rsbmi	r0, r0, #0
 c102054:	e12fff1e 	bx	lr
 c102058:	33a00000 	movcc	r0, #0
 c10205c:	01a00fcc 	asreq	r0, ip, #31
 c102060:	03800001 	orreq	r0, r0, #1
 c102064:	e12fff1e 	bx	lr
 c102068:	e3510801 	cmp	r1, #65536	; 0x10000
 c10206c:	21a01821 	lsrcs	r1, r1, #16
 c102070:	23a02010 	movcs	r2, #16
 c102074:	33a02000 	movcc	r2, #0
 c102078:	e3510c01 	cmp	r1, #256	; 0x100
 c10207c:	21a01421 	lsrcs	r1, r1, #8
 c102080:	22822008 	addcs	r2, r2, #8
 c102084:	e3510010 	cmp	r1, #16
 c102088:	21a01221 	lsrcs	r1, r1, #4
 c10208c:	22822004 	addcs	r2, r2, #4
 c102090:	e3510004 	cmp	r1, #4
 c102094:	82822003 	addhi	r2, r2, #3
 c102098:	908220a1 	addls	r2, r2, r1, lsr #1
 c10209c:	e35c0000 	cmp	ip, #0
 c1020a0:	e1a00233 	lsr	r0, r3, r2
 c1020a4:	42600000 	rsbmi	r0, r0, #0
 c1020a8:	e12fff1e 	bx	lr
 c1020ac:	e3500000 	cmp	r0, #0
 c1020b0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c1020b4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c1020b8:	ea000007 	b	c1020dc <__aeabi_idiv0>

0c1020bc <__aeabi_idivmod>:
 c1020bc:	e3510000 	cmp	r1, #0
 c1020c0:	0afffff9 	beq	c1020ac <.divsi3_skip_div0_test+0x110>
 c1020c4:	e92d4003 	push	{r0, r1, lr}
 c1020c8:	ebffffb3 	bl	c101f9c <.divsi3_skip_div0_test>
 c1020cc:	e8bd4006 	pop	{r1, r2, lr}
 c1020d0:	e0030092 	mul	r3, r2, r0
 c1020d4:	e0411003 	sub	r1, r1, r3
 c1020d8:	e12fff1e 	bx	lr

0c1020dc <__aeabi_idiv0>:
 c1020dc:	e12fff1e 	bx	lr
