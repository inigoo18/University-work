   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"D8Led.c"
  21              	.Ltext0:
  22              		.file 1 "../D8Led.c"
 1788              		.align	2
 1791              	Segments:
 1792 0000 80000000 		.word	128
 1793 0004 40000000 		.word	64
 1794 0008 20000000 		.word	32
 1795 000c 08000000 		.word	8
 1796 0010 04000000 		.word	4
 1797 0014 01000000 		.word	1
 1798 0018 02000000 		.word	2
 1799 001c 10000000 		.word	16
 1800              		.align	2
 1803              	Digits:
 1804 0020 ED000000 		.word	237
 1805 0024 60000000 		.word	96
 1806 0028 CE000000 		.word	206
 1807 002c EA000000 		.word	234
 1808 0030 63000000 		.word	99
 1809 0034 AB000000 		.word	171
 1810 0038 AF000000 		.word	175
 1811 003c E0000000 		.word	224
 1812 0040 EF000000 		.word	239
 1813 0044 E3000000 		.word	227
 1814 0048 E7000000 		.word	231
 1815 004c 2F000000 		.word	47
 1816 0050 0E000000 		.word	14
 1817 0054 6E000000 		.word	110
 1818 0058 8F000000 		.word	143
 1819 005c 87000000 		.word	135
 1820 0060 FF000000 		.word	255
 1821              		.text
 1822              		.align	2
 1823              		.global	D8Led_init
 1825              	D8Led_init:
 1826              	.LFB0:
   1:../D8Led.c    **** /*-------------------------------------------------------------------
   2:../D8Led.c    **** **
   3:../D8Led.c    **** **  Fichero:
   4:../D8Led.c    **** **    D8Led.c  10/6/2014
   5:../D8Led.c    **** **
   6:../D8Led.c    **** **    Estructura de Computadores
   7:../D8Led.c    **** **    Dpto. de Arquitectura de Computadores y Automática
   8:../D8Led.c    **** **    Facultad de Informática. Universidad Complutense de Madrid
   9:../D8Led.c    **** **
  10:../D8Led.c    **** **  Propósito:
  11:../D8Led.c    **** **    Contiene las implementaciones de las funciones
  12:../D8Led.c    **** **    para el acceso al display 8-segmentos de la placa de prototipado
  13:../D8Led.c    **** **
  14:../D8Led.c    **** **  Notas de diseño:
  15:../D8Led.c    **** **    Equivale al fichero homónimo usado en Fundamentos de Computadores 
  16:../D8Led.c    **** **
  17:../D8Led.c    **** **-----------------------------------------------------------------*/
  18:../D8Led.c    **** 
  19:../D8Led.c    **** #include "44b.h"
  20:../D8Led.c    **** #include "D8Led.h"
  21:../D8Led.c    **** 
  22:../D8Led.c    **** /* 
  23:../D8Led.c    ****  * Mascaras utiles para el uso del display de 8 segmentos
  24:../D8Led.c    ****  * Cada bit representa un segmento. En la mascara ponemos
  25:../D8Led.c    ****  * un 1 si queremos que se encienda dicho segmento. Como 
  26:../D8Led.c    ****  * el display funciona con logica invertida, nos toca 
  27:../D8Led.c    ****  * invertir el valor al escribir en el puerto.
  28:../D8Led.c    ****  */
  29:../D8Led.c    **** #define SEGMENT_A		0x80		
  30:../D8Led.c    **** #define SEGMENT_B		0x40
  31:../D8Led.c    **** #define SEGMENT_C		0x20
  32:../D8Led.c    **** #define SEGMENT_D		0x08
  33:../D8Led.c    **** #define SEGMENT_E		0x04
  34:../D8Led.c    **** #define SEGMENT_F		0x02
  35:../D8Led.c    **** #define SEGMENT_G		0x01
  36:../D8Led.c    **** #define SEGMENT_P		0x10
  37:../D8Led.c    **** 
  38:../D8Led.c    **** #define DIGIT_0  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_G )
  39:../D8Led.c    **** #define DIGIT_1  ( SEGMENT_B | SEGMENT_C )
  40:../D8Led.c    **** #define DIGIT_2  ( SEGMENT_A | SEGMENT_B | SEGMENT_F | SEGMENT_E | SEGMENT_D )
  41:../D8Led.c    **** #define DIGIT_3  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_F )
  42:../D8Led.c    **** #define DIGIT_4  ( SEGMENT_F | SEGMENT_B | SEGMENT_C | SEGMENT_G )
  43:../D8Led.c    **** #define DIGIT_5  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_G | SEGMENT_F )
  44:../D8Led.c    **** #define DIGIT_6  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  45:../D8Led.c    **** #define DIGIT_7  ( SEGMENT_A | SEGMENT_B | SEGMENT_C )
  46:../D8Led.c    **** #define DIGIT_8  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_
  47:../D8Led.c    **** #define DIGIT_9  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_F | SEGMENT_G )
  48:../D8Led.c    **** #define DIGIT_A  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  49:../D8Led.c    **** #define DIGIT_B  ( SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  50:../D8Led.c    **** #define DIGIT_C  ( SEGMENT_D | SEGMENT_E | SEGMENT_F )
  51:../D8Led.c    **** #define DIGIT_D  ( SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F )
  52:../D8Led.c    **** #define DIGIT_E  ( SEGMENT_A | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  53:../D8Led.c    **** #define DIGIT_F  ( SEGMENT_A | SEGMENT_E | SEGMENT_F | SEGMENT_G )
  54:../D8Led.c    **** #define DIGIT_X  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_
  55:../D8Led.c    **** 
  56:../D8Led.c    **** 
  57:../D8Led.c    **** /* Tablas para facilitar el uso del display */
  58:../D8Led.c    **** 
  59:../D8Led.c    **** static unsigned int Segments[] = { SEGMENT_A, SEGMENT_B, SEGMENT_C, SEGMENT_D,
  60:../D8Led.c    **** 	                               SEGMENT_E, SEGMENT_G, SEGMENT_F, SEGMENT_P };
  61:../D8Led.c    **** 
  62:../D8Led.c    **** static unsigned int Digits[] = { DIGIT_0, DIGIT_1, DIGIT_2, DIGIT_3, 
  63:../D8Led.c    **** 	 							 DIGIT_4, DIGIT_5, DIGIT_6, DIGIT_7, 
  64:../D8Led.c    **** 								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
  65:../D8Led.c    **** 								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F, DIGIT_X };
  66:../D8Led.c    **** 
  67:../D8Led.c    **** 			  					  
  68:../D8Led.c    **** void D8Led_init(void)
  69:../D8Led.c    **** {
 1827              		.loc 1 69 0
 1828              		.cfi_startproc
 1829              		@ Function supports interworking.
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 0000 0DC0A0E1 		mov	ip, sp
 1833              	.LCFI0:
 1834              		.cfi_def_cfa_register 12
 1835 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1836 0008 04B04CE2 		sub	fp, ip, #4
 1837              		.cfi_offset 14, -8
 1838              		.cfi_offset 13, -12
 1839              		.cfi_offset 11, -16
 1840              	.LCFI1:
 1841              		.cfi_def_cfa 11, 4
  70:../D8Led.c    ****     LED8ADDR = ~0 ;
 1842              		.loc 1 70 0
 1843 000c 8537A0E3 		mov	r3, #34865152
 1844 0010 0020E0E3 		mvn	r2, #0
 1845 0014 0020C3E5 		strb	r2, [r3, #0]
  71:../D8Led.c    **** }
 1846              		.loc 1 71 0
 1847 0018 0CD04BE2 		sub	sp, fp, #12
 1848 001c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1849 0020 1EFF2FE1 		bx	lr
 1850              		.cfi_endproc
 1851              	.LFE0:
 1853              		.align	2
 1854              		.global	D8Led_segment
 1856              	D8Led_segment:
 1857              	.LFB1:
  72:../D8Led.c    **** 
  73:../D8Led.c    **** void D8Led_segment(int value)
  74:../D8Led.c    **** {
 1858              		.loc 1 74 0
 1859              		.cfi_startproc
 1860              		@ Function supports interworking.
 1861              		@ args = 0, pretend = 0, frame = 8
 1862              		@ frame_needed = 1, uses_anonymous_args = 0
 1863 0024 0DC0A0E1 		mov	ip, sp
 1864              	.LCFI2:
 1865              		.cfi_def_cfa_register 12
 1866 0028 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1867 002c 04B04CE2 		sub	fp, ip, #4
 1868              		.cfi_offset 14, -8
 1869              		.cfi_offset 13, -12
 1870              		.cfi_offset 11, -16
 1871              	.LCFI3:
 1872              		.cfi_def_cfa 11, 4
 1873 0030 08D04DE2 		sub	sp, sp, #8
 1874 0034 10000BE5 		str	r0, [fp, #-16]
  75:../D8Led.c    **** 	if( (value >= 0) && (value < 8) )
 1875              		.loc 1 75 0
 1876 0038 10301BE5 		ldr	r3, [fp, #-16]
 1877 003c 000053E3 		cmp	r3, #0
 1878 0040 0A0000BA 		blt	.L2
 1879              		.loc 1 75 0 is_stmt 0 discriminator 1
 1880 0044 10301BE5 		ldr	r3, [fp, #-16]
 1881 0048 070053E3 		cmp	r3, #7
 1882 004c 070000CA 		bgt	.L2
  76:../D8Led.c    **** 		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
  77:../D8Led.c    **** 		// correcto para que se ilumine el segmento que está en la posición
  78:../D8Led.c    **** 		// value del array Segmentes. Hay que tener en cuente que el display
  79:../D8Led.c    **** 		// usa lógica invertida (0 enciende, 1 apaga).
  80:../D8Led.c    **** 		LED8ADDR = ~Segments[value];
 1883              		.loc 1 80 0 is_stmt 1
 1884 0050 8537A0E3 		mov	r3, #34865152
 1885 0054 20209FE5 		ldr	r2, .L4
 1886 0058 10101BE5 		ldr	r1, [fp, #-16]
 1887 005c 012192E7 		ldr	r2, [r2, r1, asl #2]
 1888 0060 FF2002E2 		and	r2, r2, #255
 1889 0064 0220E0E1 		mvn	r2, r2
 1890 0068 FF2002E2 		and	r2, r2, #255
 1891 006c 0020C3E5 		strb	r2, [r3, #0]
 1892              	.L2:
  81:../D8Led.c    **** }
 1893              		.loc 1 81 0
 1894 0070 0CD04BE2 		sub	sp, fp, #12
 1895 0074 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1896 0078 1EFF2FE1 		bx	lr
 1897              	.L5:
 1898              		.align	2
 1899              	.L4:
 1900 007c 00000000 		.word	Segments
 1901              		.cfi_endproc
 1902              	.LFE1:
 1904              		.align	2
 1905              		.global	D8Led_digit
 1907              	D8Led_digit:
 1908              	.LFB2:
  82:../D8Led.c    **** 
  83:../D8Led.c    **** void D8Led_digit(int value)
  84:../D8Led.c    **** {
 1909              		.loc 1 84 0
 1910              		.cfi_startproc
 1911              		@ Function supports interworking.
 1912              		@ args = 0, pretend = 0, frame = 8
 1913              		@ frame_needed = 1, uses_anonymous_args = 0
 1914 0080 0DC0A0E1 		mov	ip, sp
 1915              	.LCFI4:
 1916              		.cfi_def_cfa_register 12
 1917 0084 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1918 0088 04B04CE2 		sub	fp, ip, #4
 1919              		.cfi_offset 14, -8
 1920              		.cfi_offset 13, -12
 1921              		.cfi_offset 11, -16
 1922              	.LCFI5:
 1923              		.cfi_def_cfa 11, 4
 1924 008c 08D04DE2 		sub	sp, sp, #8
 1925 0090 10000BE5 		str	r0, [fp, #-16]
  85:../D8Led.c    **** 	if( (value >= 0) && (value < 17) )
 1926              		.loc 1 85 0
 1927 0094 10301BE5 		ldr	r3, [fp, #-16]
 1928 0098 000053E3 		cmp	r3, #0
 1929 009c 0A0000BA 		blt	.L6
 1930              		.loc 1 85 0 is_stmt 0 discriminator 1
 1931 00a0 10301BE5 		ldr	r3, [fp, #-16]
 1932 00a4 100053E3 		cmp	r3, #16
 1933 00a8 070000CA 		bgt	.L6
  86:../D8Led.c    **** 		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
  87:../D8Led.c    **** 		// correcto para que se ilumine el dígito que está en la posición
  88:../D8Led.c    **** 		// value del array Digits. Hay que tener en cuente que el display
  89:../D8Led.c    **** 		// usa lógica invertida (0 enciende, 1 apaga).
  90:../D8Led.c    **** 		LED8ADDR = ~Digits[value];
 1934              		.loc 1 90 0 is_stmt 1
 1935 00ac 8537A0E3 		mov	r3, #34865152
 1936 00b0 20209FE5 		ldr	r2, .L8
 1937 00b4 10101BE5 		ldr	r1, [fp, #-16]
 1938 00b8 012192E7 		ldr	r2, [r2, r1, asl #2]
 1939 00bc FF2002E2 		and	r2, r2, #255
 1940 00c0 0220E0E1 		mvn	r2, r2
 1941 00c4 FF2002E2 		and	r2, r2, #255
 1942 00c8 0020C3E5 		strb	r2, [r3, #0]
 1943              	.L6:
  91:../D8Led.c    **** 
  92:../D8Led.c    **** }
 1944              		.loc 1 92 0
 1945 00cc 0CD04BE2 		sub	sp, fp, #12
 1946 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1947 00d4 1EFF2FE1 		bx	lr
 1948              	.L9:
 1949              		.align	2
 1950              	.L8:
 1951 00d8 20000000 		.word	Digits
 1952              		.cfi_endproc
 1953              	.LFE2:
 1955              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 D8Led.c
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1788   .data:00000000 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1791   .data:00000000 Segments
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1803   .data:00000020 Digits
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1822   .text:00000000 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1825   .text:00000000 D8Led_init
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1856   .text:00000024 D8Led_segment
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1900   .text:0000007c $d
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1904   .text:00000080 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1907   .text:00000080 D8Led_digit
C:\Users\USUARI~2\AppData\Local\Temp\ccGwSI9S.s:1951   .text:000000d8 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
