
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 27 21:08:24 CEST 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 27 21:08:24 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\003\000\002\003\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\005\005\000\002\005\004\000\002\006\003\000\002" +
    "\006\005\000\002\007\005\000\002\007\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\006\000\002\010\006" +
    "\000\002\010\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\005\000\002" +
    "\013\003\000\002\013\005\000\002\014\004\000\002\015" +
    "\003\000\002\015\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\020" +
    "\010\000\002\021\004\000\002\021\002\000\002\022\007" +
    "\000\002\023\003\000\002\023\002\000\002\024\004\000" +
    "\002\025\004\000\002\026\003\000\002\027\004\000\002" +
    "\030\004\000\002\031\005\000\002\032\005\000\002\032" +
    "\004\000\002\033\003\000\002\033\005\000\002\034\003" +
    "\000\002\035\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\037\005\000\002\037\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\005\000\002\041" +
    "\003\000\002\042\004\000\002\042\004\000\002\042\003" +
    "\000\002\043\004\000\002\043\004\000\002\043\003\000" +
    "\002\044\004\000\002\044\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\005" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\005\000\002\052\004" +
    "\000\002\052\004\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\062\002\ufffe\004\022\005\027\006\006\007" +
    "\030\011\032\013\026\024\035\032\014\046\013\047\033" +
    "\050\024\051\051\052\045\053\021\057\042\062\017\067" +
    "\025\070\010\071\041\072\011\073\037\074\061\075\015" +
    "\001\002\000\016\002\uffe0\026\uffe0\033\uffe0\055\uffe0\056" +
    "\uffe0\061\uffe0\001\002\000\016\002\uffdc\026\uffdc\033\uffdc" +
    "\055\uffdc\056\uffdc\061\uffdc\001\002\000\072\002\uffb3\010" +
    "\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\044\uffb3\045\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061" +
    "\uffb3\001\002\000\006\012\242\026\241\001\002\000\030" +
    "\004\022\005\027\006\006\007\030\011\032\013\026\024" +
    "\035\046\013\047\033\050\024\051\051\001\002\000\030" +
    "\004\022\005\027\006\006\007\030\011\032\013\026\024" +
    "\035\046\013\047\033\050\024\051\051\001\002\000\016" +
    "\002\uffe3\026\uffe3\033\uffe3\055\uffe3\056\uffe3\061\uffe3\001" +
    "\002\000\030\004\022\005\027\006\006\007\030\011\032" +
    "\013\026\024\035\046\013\047\033\050\024\051\051\001" +
    "\002\000\062\004\022\005\027\006\006\007\030\011\032" +
    "\013\026\024\035\032\014\033\ufffe\046\013\047\033\050" +
    "\024\051\051\052\045\053\021\057\042\062\017\067\025" +
    "\070\010\071\041\072\011\073\037\074\061\075\015\001" +
    "\002\000\022\004\115\040\106\041\117\042\110\043\114" +
    "\063\113\064\111\066\116\001\002\000\004\002\231\001" +
    "\002\000\004\004\220\001\002\000\016\002\uffe1\026\uffe1" +
    "\033\uffe1\055\uffe1\056\uffe1\061\uffe1\001\002\000\030\004" +
    "\022\005\027\006\006\007\030\011\032\013\026\024\035" +
    "\046\013\047\033\050\024\051\051\001\002\000\072\002" +
    "\uffb5\010\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\044\uffb5\045\uffb5\054\uffb5\055\uffb5\056\uffb5\060" +
    "\uffb5\061\uffb5\001\002\000\016\002\uffe5\026\uffe5\033\uffe5" +
    "\055\uffe5\056\uffe5\061\uffe5\001\002\000\072\002\uffb0\010" +
    "\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\044\uffb0\045\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061" +
    "\uffb0\001\002\000\030\004\022\005\027\006\006\007\030" +
    "\011\032\013\026\024\035\046\013\047\033\050\024\051" +
    "\051\001\002\000\024\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\013\uff9f\024\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002\000" +
    "\072\002\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\044\uffb4\045\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\060\uffb4\061\uffb4\001\002\000\072\002\uffb2\010\uffb2" +
    "\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\044" +
    "\uffb2\045\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2" +
    "\001\002\000\016\002\uffda\026\uffda\033\uffda\055\uffda\056" +
    "\uffda\061\uffda\001\002\000\024\004\022\005\027\006\006" +
    "\007\030\013\026\024\035\047\033\050\024\051\051\001" +
    "\002\000\072\002\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\044\uffb1\045\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\060\uffb1\061\uffb1\001\002\000\016\002\uffdf" +
    "\026\uffdf\033\uffdf\055\uffdf\056\uffdf\061\uffdf\001\002\000" +
    "\030\004\022\005\027\006\006\007\030\011\032\013\026" +
    "\024\035\046\013\047\033\050\024\051\051\001\002\000" +
    "\016\002\uffc8\026\uffc8\033\uffc8\055\uffc8\056\uffc8\061\uffc8" +
    "\001\002\000\016\002\uffd0\026\uffd0\033\uffd0\055\uffd0\056" +
    "\uffd0\061\uffd0\001\002\000\010\002\uffff\026\202\033\uffff" +
    "\001\002\000\030\004\022\005\027\006\006\007\030\011" +
    "\032\013\026\024\035\046\013\047\033\050\024\051\051" +
    "\001\002\000\030\004\022\005\027\006\006\007\030\011" +
    "\032\013\026\024\035\046\013\047\033\050\024\051\051" +
    "\001\002\000\016\002\uffdd\026\uffdd\033\uffdd\055\uffdd\056" +
    "\uffdd\061\uffdd\001\002\000\016\002\uffdb\026\uffdb\033\uffdb" +
    "\055\uffdb\056\uffdb\061\uffdb\001\002\000\004\004\157\001" +
    "\002\000\016\002\uffde\026\uffde\033\uffde\055\uffde\056\uffde" +
    "\061\uffde\001\002\000\016\002\uffe2\026\uffe2\033\uffe2\055" +
    "\uffe2\056\uffe2\061\uffe2\001\002\000\072\002\uffb6\010\uffb6" +
    "\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\044" +
    "\uffb6\045\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\001\002\000\072\002\uffaf\010\uffaf\011\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\044\uffaf\045\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\060\uffaf\061\uffaf\001\002\000\072\002" +
    "\uffb8\010\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\044\uffb8\045\uffb8\054\uffb8\055\uffb8\056\uffb8\060" +
    "\uffb8\061\uffb8\001\002\000\006\012\ufffd\026\ufffd\001\002" +
    "\000\072\002\uffbb\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\152\031\uffbb\033\uffbb\034" +
    "\147\035\146\036\uffbb\044\uffbb\045\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\060\uffbb\061\uffbb\001\002\000\064\002\uffbe\010" +
    "\uffbe\011\uffbe\013\143\014\144\015\142\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\031\uffbe\033\uffbe\036\uffbe\044\uffbe\045\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\060\uffbe\061\uffbe\001\002\000\056\002" +
    "\uffc0\010\uffc0\011\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\033" +
    "\uffc0\036\uffc0\044\uffc0\045\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\060\uffc0\061\uffc0\001\002\000\024\004\022\005\027\006" +
    "\006\007\030\013\026\024\035\047\033\050\024\051\051" +
    "\001\002\000\056\002\uffc2\010\uffc2\011\uffc2\016\076\017" +
    "\101\020\102\021\077\022\103\023\100\025\uffc2\026\uffc2" +
    "\027\uffc2\031\uffc2\033\uffc2\036\uffc2\044\uffc2\045\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\001\002\000\022" +
    "\004\115\040\106\041\117\042\110\043\114\063\113\064" +
    "\111\066\116\001\002\000\042\002\uffc4\010\066\011\071" +
    "\025\uffc4\026\uffc4\027\uffc4\031\uffc4\033\uffc4\036\uffc4\044" +
    "\067\045\072\054\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4" +
    "\001\002\000\004\027\064\001\002\000\030\004\022\005" +
    "\027\006\006\007\030\011\032\013\026\024\035\046\013" +
    "\047\033\050\024\051\051\001\002\000\016\002\uffd9\026" +
    "\uffd9\033\uffd9\055\uffd9\056\uffd9\061\uffd9\001\002\000\030" +
    "\004\022\005\027\006\006\007\030\011\032\013\026\024" +
    "\035\046\013\047\033\050\024\051\051\001\002\000\030" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\013\uffad\024" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\001\002\000\030" +
    "\004\022\005\027\006\006\007\030\011\032\013\026\024" +
    "\035\046\013\047\033\050\024\051\051\001\002\000\030" +
    "\004\022\005\027\006\006\007\030\011\032\013\026\024" +
    "\035\046\013\047\033\050\024\051\051\001\002\000\030" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac\024" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\001\002\000\036" +
    "\002\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\033\uffc5\036" +
    "\uffc5\044\067\045\072\054\uffc5\055\uffc5\056\uffc5\060\uffc5" +
    "\061\uffc5\001\002\000\056\002\uffc3\010\uffc3\011\uffc3\016" +
    "\076\017\101\020\102\021\077\022\103\023\100\025\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\033\uffc3\036\uffc3\044\uffc3\045" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\001\002" +
    "\000\030\004\022\005\027\006\006\007\030\011\032\013" +
    "\026\024\035\046\013\047\033\050\024\051\051\001\002" +
    "\000\030\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\013" +
    "\uffab\024\uffab\046\uffab\047\uffab\050\uffab\051\uffab\001\002" +
    "\000\030\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\013" +
    "\uffa8\024\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002" +
    "\000\030\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013" +
    "\uffa6\024\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\001\002" +
    "\000\030\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\013" +
    "\uffaa\024\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001\002" +
    "\000\030\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\013" +
    "\uffa9\024\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\001\002" +
    "\000\030\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\013" +
    "\uffa7\024\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\001\002" +
    "\000\056\002\uffc1\010\uffc1\011\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\031\uffc1\033\uffc1\036\uffc1\044\uffc1\045\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\060\uffc1\061\uffc1\001\002\000\032\002\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\031\uffc6\033\uffc6\036\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\001\002\000\006" +
    "\004\uffed\037\uffed\001\002\000\004\004\137\001\002\000" +
    "\006\004\uffeb\037\uffeb\001\002\000\004\030\132\001\002" +
    "\000\006\004\ufff2\037\ufff2\001\002\000\004\032\121\001" +
    "\002\000\006\004\uffea\037\uffea\001\002\000\006\004\ufff1" +
    "\037\ufff1\001\002\000\022\004\115\040\106\041\117\042" +
    "\110\043\114\063\113\064\111\066\116\001\002\000\006" +
    "\004\uffec\037\uffec\001\002\000\006\004\uffee\037\uffee\001" +
    "\002\000\022\004\115\040\106\041\117\042\110\043\114" +
    "\063\113\064\111\066\116\001\002\000\004\004\130\001" +
    "\002\000\006\026\126\033\125\001\002\000\006\026\uffe8" +
    "\033\uffe8\001\002\000\006\004\uffef\037\uffef\001\002\000" +
    "\022\004\115\040\106\041\117\042\110\043\114\063\113" +
    "\064\111\066\116\001\002\000\006\026\uffe7\033\uffe7\001" +
    "\002\000\006\026\uffe6\033\uffe6\001\002\000\004\065\135" +
    "\001\002\000\004\005\133\001\002\000\004\031\134\001" +
    "\002\000\004\065\uffe9\001\002\000\022\004\115\040\106" +
    "\041\117\042\110\043\114\063\113\064\111\066\116\001" +
    "\002\000\006\004\ufff0\037\ufff0\001\002\000\006\012\ufffb" +
    "\026\ufffb\001\002\000\072\002\uffb7\010\uffb7\011\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\044\uffb7\045\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\001\002\000" +
    "\030\004\022\005\027\006\006\007\030\011\032\013\026" +
    "\024\035\046\013\047\033\050\024\051\051\001\002\000" +
    "\030\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3" +
    "\024\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\001\002\000" +
    "\030\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\013\uffa5" +
    "\024\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001\002\000" +
    "\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011\uffa4\013\uffa4" +
    "\024\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\001\002\000" +
    "\056\002\uffbf\010\uffbf\011\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\031" +
    "\uffbf\033\uffbf\036\uffbf\044\uffbf\045\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\060\uffbf\061\uffbf\001\002\000\004\004\156\001" +
    "\002\000\004\004\155\001\002\000\072\002\uffba\010\uffba" +
    "\011\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\044" +
    "\uffba\045\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba" +
    "\001\002\000\072\002\uffb9\010\uffb9\011\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\044\uffb9\045\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\060\uffb9\061\uffb9\001\002\000\030\004" +
    "\022\005\027\006\006\007\030\011\032\013\026\024\035" +
    "\046\013\047\033\050\024\051\051\001\002\000\004\031" +
    "\154\001\002\000\072\002\uffa2\010\uffa2\011\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\044\uffa2\045\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\060\uffa2\061\uffa2\001\002\000\072" +
    "\002\uffa1\010\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\044\uffa1\045\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\060\uffa1\061\uffa1\001\002\000\072\002\uffa0\010\uffa0\011" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\044\uffa0" +
    "\045\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\001" +
    "\002\000\004\024\161\001\002\000\004\032\014\001\002" +
    "\000\024\004\115\025\163\040\106\041\117\042\110\043" +
    "\114\063\113\064\111\066\116\001\002\000\006\004\171" +
    "\037\172\001\002\000\004\032\ufff7\001\002\000\006\025" +
    "\ufff6\036\ufff6\001\002\000\006\025\167\036\166\001\002" +
    "\000\022\004\115\040\106\041\117\042\110\043\114\063" +
    "\113\064\111\066\116\001\002\000\004\032\ufff8\001\002" +
    "\000\006\025\ufff5\036\ufff5\001\002\000\006\025\ufff3\036" +
    "\ufff3\001\002\000\004\004\173\001\002\000\006\025\ufff4" +
    "\036\ufff4\001\002\000\006\012\ufff9\026\ufff9\001\002\000" +
    "\004\060\176\001\002\000\054\004\022\005\027\006\006" +
    "\007\030\011\032\013\026\024\035\032\014\046\013\047" +
    "\033\050\024\051\051\053\021\057\042\061\uffd3\062\017" +
    "\067\025\070\010\071\041\072\011\073\037\001\002\000" +
    "\012\026\202\055\uffd4\056\uffd4\061\uffd4\001\002\000\004" +
    "\061\201\001\002\000\016\002\uffd5\026\uffd5\033\uffd5\055" +
    "\uffd5\056\uffd5\061\uffd5\001\002\000\052\004\022\005\027" +
    "\006\006\007\030\011\032\013\026\024\035\032\014\046" +
    "\013\047\033\050\024\051\051\053\021\057\042\062\017" +
    "\067\025\070\010\071\041\072\011\073\037\001\002\000" +
    "\016\002\uffe4\026\uffe4\033\uffe4\055\uffe4\056\uffe4\061\uffe4" +
    "\001\002\000\016\002\uffd2\026\uffd2\033\uffd2\055\uffd2\056" +
    "\uffd2\061\uffd2\001\002\000\004\025\206\001\002\000\072" +
    "\002\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\044\uffae\045\uffae\054\uffae\055\uffae\056\uffae" +
    "\060\uffae\061\uffae\001\002\000\072\002\uffbd\010\uffbd\011" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\152\031\uffbd\033\uffbd\034\147\035\146\036\uffbd\044\uffbd" +
    "\045\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd\001" +
    "\002\000\016\002\uffcf\026\uffcf\033\uffcf\055\uffcf\056\uffcf" +
    "\061\uffcf\001\002\000\004\054\212\001\002\000\056\004" +
    "\022\005\027\006\006\007\030\011\032\013\026\024\035" +
    "\032\014\046\013\047\033\050\024\051\051\053\021\055" +
    "\uffd3\056\uffd3\057\042\062\017\067\025\070\010\071\041" +
    "\072\011\073\037\001\002\000\006\055\214\056\uffd6\001" +
    "\002\000\054\004\022\005\027\006\006\007\030\011\032" +
    "\013\026\024\035\032\014\046\013\047\033\050\024\051" +
    "\051\053\021\056\uffd3\057\042\062\017\067\025\070\010" +
    "\071\041\072\011\073\037\001\002\000\004\056\216\001" +
    "\002\000\016\002\uffd8\026\uffd8\033\uffd8\055\uffd8\056\uffd8" +
    "\061\uffd8\001\002\000\004\056\uffd7\001\002\000\004\024" +
    "\221\001\002\000\032\004\022\005\027\006\006\007\030" +
    "\011\032\013\026\024\035\025\223\046\013\047\033\050" +
    "\024\051\051\001\002\000\016\002\uffcd\026\uffcd\033\uffcd" +
    "\055\uffcd\056\uffcd\061\uffcd\001\002\000\016\002\uffcb\026" +
    "\uffcb\033\uffcb\055\uffcb\056\uffcb\061\uffcb\001\002\000\006" +
    "\025\uffca\036\uffca\001\002\000\006\025\227\036\226\001" +
    "\002\000\030\004\022\005\027\006\006\007\030\011\032" +
    "\013\026\024\035\046\013\047\033\050\024\051\051\001" +
    "\002\000\016\002\uffcc\026\uffcc\033\uffcc\055\uffcc\056\uffcc" +
    "\061\uffcc\001\002\000\006\025\uffc9\036\uffc9\001\002\000" +
    "\004\002\000\001\002\000\004\004\233\001\002\000\006" +
    "\012\ufffa\026\ufffa\001\002\000\004\033\235\001\002\000" +
    "\020\002\uffc7\012\uffc7\026\uffc7\033\uffc7\055\uffc7\056\uffc7" +
    "\061\uffc7\001\002\000\064\002\uffbc\010\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\033" +
    "\uffbc\036\uffbc\044\uffbc\045\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\061\uffbc\001\002\000\016\002\uffd1\026\uffd1\033" +
    "\uffd1\055\uffd1\056\uffd1\061\uffd1\001\002\000\016\002\uffce" +
    "\026\uffce\033\uffce\055\uffce\056\uffce\061\uffce\001\002\000" +
    "\010\052\045\074\061\075\015\001\002\000\052\004\022" +
    "\005\027\006\006\007\030\011\032\013\026\024\035\032" +
    "\014\046\013\047\033\050\024\051\051\053\021\057\042" +
    "\062\017\067\025\070\010\071\041\072\011\073\037\001" +
    "\002\000\010\002\001\026\202\033\001\001\002\000\006" +
    "\012\ufffc\026\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\064\002\015\003\006\004\052\015\037\016" +
    "\022\017\011\020\046\022\017\024\003\025\033\026\045" +
    "\027\042\030\004\031\043\034\030\035\035\036\062\037" +
    "\061\040\057\041\055\042\054\043\053\044\051\045\047" +
    "\053\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\237\037\061" +
    "\040\057\041\055\042\054\043\053\044\051\045\047\053" +
    "\056\001\001\000\024\036\236\037\061\040\057\041\055" +
    "\042\054\043\053\044\051\045\047\053\056\001\001\000" +
    "\002\001\001\000\014\042\235\043\053\044\051\045\047" +
    "\053\056\001\001\000\064\002\233\003\006\004\052\015" +
    "\037\016\022\017\011\020\046\022\017\024\003\025\033" +
    "\026\045\027\042\030\004\031\043\034\030\035\035\036" +
    "\062\037\061\040\057\041\055\042\054\043\053\044\051" +
    "\045\047\053\056\001\001\000\006\010\231\011\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\210\037\061\040\057\041\055\042\054\043" +
    "\053\044\051\045\047\053\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\207\037" +
    "\061\040\057\041\055\042\054\043\053\044\051\045\047" +
    "\053\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\043\206\044\051" +
    "\045\047\053\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\036\204\037\061\040\057\041\055\042\054" +
    "\043\053\044\051\045\047\053\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\036\203" +
    "\037\061\040\057\041\055\042\054\043\053\044\051\045" +
    "\047\053\056\001\001\000\024\036\174\037\061\040\057" +
    "\041\055\042\054\043\053\044\051\045\047\053\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\147\052\150\001\001\000\004\050\140\001\001\000" +
    "\002\001\001\000\010\044\137\045\047\053\056\001\001" +
    "\000\004\047\074\001\001\000\006\010\106\011\111\001" +
    "\001\000\004\046\067\001\001\000\002\001\001\000\024" +
    "\036\064\037\061\040\057\041\055\042\054\043\053\044" +
    "\051\045\047\053\056\001\001\000\002\001\001\000\024" +
    "\036\104\037\061\040\057\041\055\042\054\043\053\044" +
    "\051\045\047\053\056\001\001\000\002\001\001\000\020" +
    "\040\073\041\055\042\054\043\053\044\051\045\047\053" +
    "\056\001\001\000\022\037\072\040\057\041\055\042\054" +
    "\043\053\044\051\045\047\053\056\001\001\000\002\001" +
    "\001\000\004\046\067\001\001\000\004\047\074\001\001" +
    "\000\016\041\103\042\054\043\053\044\051\045\047\053" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\117\011\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\121\011\111" +
    "\013\122\014\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\121" +
    "\011\111\014\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\135\011\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\144\043\053\044\051\045\047\053\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\152\037\061\040\057" +
    "\041\055\042\054\043\053\044\051\045\047\053\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\157\001\001\000\004\035" +
    "\173\001\001\000\012\006\164\007\163\010\161\011\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\167\010\161\011\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\015\176\016\022\017\011\020" +
    "\046\022\017\023\177\024\003\025\033\026\045\027\042" +
    "\030\004\031\043\034\030\035\035\036\062\037\061\040" +
    "\057\041\055\042\054\043\053\044\051\045\047\053\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\016\202\017\011\020\046\022\017\024\003" +
    "\025\033\026\045\027\042\030\004\031\043\034\030\035" +
    "\035\036\062\037\061\040\057\041\055\042\054\043\053" +
    "\044\051\045\047\053\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\147\052\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\015\176\016\022\017\011\020\046\022\017" +
    "\023\212\024\003\025\033\026\045\027\042\030\004\031" +
    "\043\034\030\035\035\036\062\037\061\040\057\041\055" +
    "\042\054\043\053\044\051\045\047\053\056\001\001\000" +
    "\004\021\214\001\001\000\060\015\176\016\022\017\011" +
    "\020\046\022\017\023\216\024\003\025\033\026\045\027" +
    "\042\030\004\031\043\034\030\035\035\036\062\037\061" +
    "\040\057\041\055\042\054\043\053\044\051\045\047\053" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\221\001\001\000\026\033\224\036" +
    "\223\037\061\040\057\041\055\042\054\043\053\044\051" +
    "\045\047\053\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\036\227" +
    "\037\061\040\057\041\055\042\054\043\053\044\051\045" +
    "\047\053\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\243\001\001\000" +
    "\056\015\242\016\022\017\011\020\046\022\017\024\003" +
    "\025\033\026\045\027\042\030\004\031\043\034\030\035" +
    "\035\036\062\037\061\040\057\041\055\042\054\043\053" +
    "\044\051\045\047\053\056\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Tiny1 ::= Declaraciones AMP_DOBLE Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tiny1",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Tiny1 EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Tiny1 ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tiny1",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Tiny1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tiny1",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= Declaraciones PC Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= VAR Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= TYPE Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= PROC ID ParametrosFormales Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParametrosFormales ::= PAP Parametros PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParametrosFormales ::= PAP PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Parametros ::= Parametros COMA Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parametro ::= Tipo AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parametro ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= TipoBasico 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= ARRAY TamArray OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= RECORD LLAP Campos LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TipoBasico ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TipoBasico ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TipoBasico ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TipoBasico ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TamArray ::= CCAP LIT_ENT CCCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TamArray",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Campos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Campos ::= Campos PC Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Campo ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= Instrucciones PC Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= IfStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= Lectura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= Escritura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= NuevaLinea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= ReservaMemoria 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= LiberacionMemoria 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InvocacionProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= Compuesta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignacion ::= E0 ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStatement ::= IF E0 THEN ListaI Else ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IfStatement",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= ELSE ListaI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // While ::= WHILE E0 DO ListaI ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListaI ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListaI ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Lectura ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lectura",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Escritura ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Escritura",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NuevaLinea ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NuevaLinea",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ReservaMemoria ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ReservaMemoria",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LiberacionMemoria ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LiberacionMemoria",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InvocacionProc ::= CALL ID ParametrosReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InvocacionProc",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ParametrosReales ::= PAP ListaE PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosReales",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ParametrosReales ::= PAP PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParametrosReales",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListaE ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListaE ::= ListaE COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Compuesta ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Compuesta",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bloque ::= LLAP Tiny1 LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E1 ::= E1 OPBOOL E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E2 ::= E2 OPREL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E3 ::= E4 OP3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E5 ::= E5 OPINDEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= E5 OPACC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E6 ::= OPINDIR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E7 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E7 ::= LIT_ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= LIT_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= LIT_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= PAP E0 PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPBOOL ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBOOL",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPBOOL ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBOOL",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPREL ::= LT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPREL ::= GT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPREL ::= LTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPREL ::= GTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPREL ::= SAME 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPREL ::= DIFF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPREL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP3 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP3 ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPINDEX ::= CCAP E0 CCCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPINDEX",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPACC ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPACC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPACC ::= FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPACC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPINDIR ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPINDIR",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

