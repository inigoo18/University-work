/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void TinyP() throws ParseException {
    Tiny1();
    jj_consume_token(0);
  }

  final public void Tiny1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case proc:
    case var:
    case type:
      Declaraciones();
      jj_consume_token(amp_doble);
      Instrucciones();
      break;
    case menos:
    case mul:
    case pap:
    case llap:
    case not:
    case null_t:
    case true_t:
    case false_t:
    case if_t:
    case while_t:
    case call:
    case new_t:
    case delete:
    case read:
    case write:
    case nl:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      Instrucciones();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Declaraciones() throws ParseException {
    Declaracion();
    RDeclaraciones();
  }

  final public void RDeclaraciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pc:
      jj_consume_token(pc);
      Declaracion();
      RDeclaraciones();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void Declaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      jj_consume_token(var);
      Tipo();
      jj_consume_token(ID);
      break;
    case type:
      jj_consume_token(type);
      Tipo();
      jj_consume_token(ID);
      break;
    case proc:
      jj_consume_token(proc);
      jj_consume_token(ID);
      ParametrosFormales();
      Bloque();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ParametrosFormales() throws ParseException {
    jj_consume_token(pap);
    Parametros();
    jj_consume_token(pcie);
  }

  final public void Parametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case int_t:
    case real_t:
    case bool_t:
    case string_t:
    case record:
    case array:
    case pointer:
    case ID:
      Parametro();
      RParametros();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void RParametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      Parametro();
      RParametros();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void Parametro() throws ParseException {
    Tipo();
    RParametro();
  }

  final public void RParametro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case amp:
      jj_consume_token(amp);
      jj_consume_token(ID);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case int_t:
    case real_t:
    case bool_t:
    case string_t:
      TipoBasico();
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case array:
      jj_consume_token(array);
      TamArray();
      jj_consume_token(of);
      Tipo();
      break;
    case record:
      jj_consume_token(record);
      jj_consume_token(llap);
      Campos();
      jj_consume_token(llcie);
      break;
    case pointer:
      jj_consume_token(pointer);
      Tipo();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TipoBasico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case int_t:
      jj_consume_token(int_t);
      break;
    case real_t:
      jj_consume_token(real_t);
      break;
    case bool_t:
      jj_consume_token(bool_t);
      break;
    case string_t:
      jj_consume_token(string_t);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TamArray() throws ParseException {
    jj_consume_token(ccap);
    jj_consume_token(numeroEntero);
    jj_consume_token(ccie);
  }

  final public void Campos() throws ParseException {
    Campo();
    RCampos();
  }

  final public void RCampos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pc:
      jj_consume_token(pc);
      Campo();
      RCampos();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void Campo() throws ParseException {
    Tipo();
    jj_consume_token(ID);
  }

  final public void Instrucciones() throws ParseException {
    Instruccion();
    RInstrucciones();
  }

  final public void RInstrucciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pc:
      jj_consume_token(pc);
      Instruccion();
      RInstrucciones();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void Instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
    case mul:
    case pap:
    case not:
    case null_t:
    case true_t:
    case false_t:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      Asignacion();
      break;
    case if_t:
      ifStatement();
      break;
    case while_t:
      While();
      break;
    case read:
      Lectura();
      break;
    case write:
      Escritura();
      break;
    case nl:
      NuevaLinea();
      break;
    case new_t:
      ReservaMemoria();
      break;
    case delete:
      LiberacionMemoria();
      break;
    case call:
      InvocacionProc();
      break;
    case llap:
      Compuesta();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Asignacion() throws ParseException {
    E0();
    jj_consume_token(asig);
    E0();
  }

  final public void ifStatement() throws ParseException {
    jj_consume_token(if_t);
    E0();
    jj_consume_token(then);
    ListaI();
    Else();
    jj_consume_token(endif);
  }

  final public void Else() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case else_t:
      jj_consume_token(else_t);
      ListaI();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void While() throws ParseException {
    jj_consume_token(while_t);
    E0();
    jj_consume_token(do_t);
    ListaI();
    jj_consume_token(endwhile);
  }

  final public void ListaI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
    case mul:
    case pap:
    case llap:
    case not:
    case null_t:
    case true_t:
    case false_t:
    case if_t:
    case while_t:
    case call:
    case new_t:
    case delete:
    case read:
    case write:
    case nl:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      Instrucciones();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void Lectura() throws ParseException {
    jj_consume_token(read);
    E0();
  }

  final public void Escritura() throws ParseException {
    jj_consume_token(write);
    E0();
  }

  final public void NuevaLinea() throws ParseException {
    jj_consume_token(nl);
  }

  final public void ReservaMemoria() throws ParseException {
    jj_consume_token(new_t);
    E0();
  }

  final public void LiberacionMemoria() throws ParseException {
    jj_consume_token(delete);
    E0();
  }

  final public void InvocacionProc() throws ParseException {
    jj_consume_token(call);
    jj_consume_token(ID);
    ParametrosReales();
  }

  final public void ParametrosReales() throws ParseException {
    jj_consume_token(pap);
    RParametrosReales();
  }

  final public void RParametrosReales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
    case mul:
    case pap:
    case not:
    case null_t:
    case true_t:
    case false_t:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      ListaE();
      jj_consume_token(pcie);
      break;
    case pcie:
      jj_consume_token(pcie);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListaE() throws ParseException {
    E0();
    RListaE();
  }

  final public void RListaE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      E0();
      RListaE();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void Compuesta() throws ParseException {
    Bloque();
  }

  final public void Bloque() throws ParseException {
    jj_consume_token(llap);
    Tiny1();
    jj_consume_token(llcie);
  }

  final public void E0() throws ParseException {
    E1();
    RE0();
  }

  final public void RE0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mas:
      jj_consume_token(mas);
      E0();
      break;
    case menos:
      jj_consume_token(menos);
      E1();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    RE1();
  }

  final public void RE1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
    case or:
      OPBOOL();
      E2();
      RE1();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    RE2();
  }

  final public void RE2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lt:
    case gt:
    case lte:
    case gte:
    case same:
    case diff:
      OPREL();
      E3();
      RE2();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    RE3();
  }

  final public void RE3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
    case div:
    case porcentaje:
      OP3();
      E4();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
      jj_consume_token(menos);
      E5();
      break;
    case not:
      jj_consume_token(not);
      E4();
      break;
    case mul:
    case pap:
    case null_t:
    case true_t:
    case false_t:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      E5();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    RE5P();
  }

  final public void RE5P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ccap:
    case punto:
    case flecha:
      RE5();
      RE5P();
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void RE5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ccap:
      OPINDEX();
      break;
    case punto:
    case flecha:
      OPACC();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
      OPINDIR();
      E6();
      break;
    case pap:
    case null_t:
    case true_t:
    case false_t:
    case ID:
    case numeroEntero:
    case numeroReal:
    case litString:
      E7();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case numeroEntero:
      jj_consume_token(numeroEntero);
      break;
    case numeroReal:
      jj_consume_token(numeroReal);
      break;
    case litString:
      jj_consume_token(litString);
      break;
    case true_t:
      jj_consume_token(true_t);
      break;
    case false_t:
      jj_consume_token(false_t);
      break;
    case null_t:
      jj_consume_token(null_t);
      break;
    case pap:
      jj_consume_token(pap);
      E0();
      jj_consume_token(pcie);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBOOL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      jj_consume_token(and);
      break;
    case or:
      jj_consume_token(or);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPREL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lt:
      jj_consume_token(lt);
      break;
    case gt:
      jj_consume_token(gt);
      break;
    case lte:
      jj_consume_token(lte);
      break;
    case gte:
      jj_consume_token(gte);
      break;
    case same:
      jj_consume_token(same);
      break;
    case diff:
      jj_consume_token(diff);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
      jj_consume_token(mul);
      break;
    case div:
      jj_consume_token(div);
      break;
    case porcentaje:
      jj_consume_token(porcentaje);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPINDEX() throws ParseException {
    jj_consume_token(ccap);
    E0();
    jj_consume_token(ccie);
  }

  final public void OPACC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case punto:
      jj_consume_token(punto);
      jj_consume_token(ID);
      break;
    case flecha:
      jj_consume_token(flecha);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPINDIR() throws ParseException {
    jj_consume_token(mul);
  }

  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80082014,0x8000,0x0,0x1e000000,0x800000,0x1000000,0x1e000000,0x1e000000,0x8000,0x8000,0x80082014,0x0,0x80082014,0x80006014,0x800000,0x6,0x60000000,0x1f80,0x70,0x80002014,0x620000,0x620000,0x2010,0x2000,0x60000000,0x1f80,0x70,0x600000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x7f091f,0x0,0x600008,0xb000,0x0,0x0,0xb000,0x0,0x0,0x0,0x1f0917,0x40,0x1f0917,0x7,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x7,0x7,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x3c,0x0,0x0,0x4,0x0,0x4,0x4,0x0,0x0,0x0,0x3c,0x0,0x3c,0x3c,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x3c,0x3c,0x0,0x0,0x0,0x0,};
   }

  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[70];
    for (int i = 0; i < 70; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                       }
